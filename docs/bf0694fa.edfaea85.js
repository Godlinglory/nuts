(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{118:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),l=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=l.a.createContext({}),o=function(e){var t=l.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=o(e.components);return l.a.createElement(i.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},m=l.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,b=e.parentName,i=u(e,["components","mdxType","originalType","parentName"]),p=o(n),m=a,d=p["".concat(b,".").concat(m)]||p[m]||s[m]||r;return n?l.a.createElement(d,c(c({ref:t},i),{},{components:n})):l.a.createElement(d,c({ref:t},i))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,b=new Array(r);b[0]=m;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:a,b[1]=c;for(var i=2;i<r;i++)b[i]=n[i];return l.a.createElement.apply(null,b)}return l.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},98:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return o}));var a=n(2),l=n(6),r=(n(0),n(118)),b={id:"javadoc_Command_Line",title:"Command Line",sidebar_label:"Command Line"},c={unversionedId:"javadocs/javadoc_Command_Line",id:"javadocs/javadoc_Command_Line",isDocsHomePage:!1,title:"Command Line",description:"`",source:"@site/docs/javadocs/Command Line.md",permalink:"/nuts/docs/javadocs/javadoc_Command_Line",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/javadocs/Command Line.md",sidebar_label:"Command Line",sidebar:"someSidebar",previous:{title:"Format",permalink:"/nuts/docs/javadocs/javadoc_Format"},next:{title:"Application",permalink:"/nuts/docs/javadocs/javadoc_Application"}},u=[{value:"\u2615 NutsArgument",id:"-nutsargument",children:[{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties",children:[]},{value:"\u2699 Instance Methods",id:"-instance-methods",children:[]}]},{value:"\u2615 NutsArgumentCandidate",id:"-nutsargumentcandidate",children:[{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties-1",children:[]}]},{value:"\u2615 NutsArgumentName",id:"-nutsargumentname",children:[{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties-2",children:[]},{value:"\u2699 Instance Methods",id:"-instance-methods-1",children:[]}]},{value:"\u2615 NutsArgumentType",id:"-nutsargumenttype",children:[{value:"\ud83d\udce2\u2744 Constant Fields",id:"-constant-fields",children:[]},{value:"\ud83d\udce2\u2699 Static Methods",id:"-static-methods",children:[]},{value:"\u2699 Instance Methods",id:"-instance-methods-2",children:[]}]},{value:"\u2615 NutsCommandAutoComplete",id:"-nutscommandautocomplete",children:[{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties-3",children:[]},{value:"\u2699 Instance Methods",id:"-instance-methods-3",children:[]}]},{value:"\u2615 NutsCommandAutoCompleteBase",id:"-nutscommandautocompletebase",children:[{value:"\ud83e\ude84 Constructors",id:"\ud83e\ude84-constructors",children:[]},{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties-4",children:[]},{value:"\u2699 Instance Methods",id:"-instance-methods-4",children:[]}]},{value:"\u2615 NutsCommandExecOptions",id:"-nutscommandexecoptions",children:[{value:"\ud83e\ude84 Constructors",id:"\ud83e\ude84-constructors-1",children:[]},{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties-5",children:[]},{value:"\u2699 Instance Methods",id:"-instance-methods-5",children:[]}]},{value:"\u2615 NutsCommandLine",id:"-nutscommandline",children:[{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties-6",children:[]},{value:"\u2699 Instance Methods",id:"-instance-methods-6",children:[]}]},{value:"\u2615 NutsCommandLineFormat",id:"-nutscommandlineformat",children:[{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties-7",children:[]},{value:"\u2699 Instance Methods",id:"-instance-methods-7",children:[]}]},{value:"\u2615 NutsCommandLineProcessor",id:"-nutscommandlineprocessor",children:[{value:"\u2699 Instance Methods",id:"-instance-methods-8",children:[]}]},{value:"\u2615 NutsConfigurable",id:"-nutsconfigurable",children:[{value:"\u2699 Instance Methods",id:"-instance-methods-9",children:[]}]}],i={rightToc:u};function o(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"     __        __           ___    ____  ____\n  /\\ \\ \\ _  __/ /______    /   |  / __ \\/  _/\n /  \\/ / / / / __/ ___/   / /| | / /_/ // /   \n/ /\\  / /_/ / /_(__  )   / ___ |/ ____// /       \n\\_\\ \\/\\__,_/\\__/____/   /_/  |_/_/   /___/  version 0.7.0\n")),Object(r.b)("h2",{id:"-nutsargument"},"\u2615 NutsArgument"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public interface net.vpc.app.nuts.NutsArgument\n")),Object(r.b)("p",null," Command Line Argument"),Object(r.b)("p",null," \\@author vpc\n\\@since 0.5.5\n\\@category Command Line"),Object(r.b)("h3",{id:"-instance-properties"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-argumentkey"},"\ud83d\udcc4\ud83c\udf9b argumentKey"),Object(r.b)("p",null,"return new instance (never null) of the key part of the argument. The key\ndoes not include neither ! nor // or = argument parts as they are parsed\nseparately. Here example of getArgumentKey result of some arguments\n\\<ul",">","\n\\<li",">",'Argument("key").getArgumentKey() ==',">",' Argument("key") \\</li',">","\n\\<li",">",'Argument("key=value").getArgumentKey() ==',">",' Argument("key") \\</li',">","\n\\<li",">",'Argument("--key=value").getArgumentKey() ==',">",' Argument("--key")\n\\</li',">","\n\\<li",">",'Argument("--!key=value").getArgumentKey() ==',">",' Argument("--key")\n\\</li',">","\n\\<li",">",'Argument("--!//key=value").getArgumentKey() ==',">",' Argument("--key")\n\\</li',">","\n\\</ul",">"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] NutsArgument public argumentKey\npublic NutsArgument getArgumentKey()\n")),Object(r.b)("h4",{id:"-argumentoptionname"},"\ud83d\udcc4\ud83c\udf9b argumentOptionName"),Object(r.b)("p",null,"return option key part excluding prefix (\\'-\\' and \\'--\\')"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] NutsArgument public argumentOptionName\npublic NutsArgument getArgumentOptionName()\n")),Object(r.b)("h4",{id:"-argumentvalue"},"\ud83d\udcc4\ud83c\udf9b argumentValue"),Object(r.b)("p",null,"return new instance (never null) of the value part of the argument (after\n=). However Argument\\'s value may be null (\n","{","\\@code getArgumentValue().getString() == null","}","). Here are some examples of\ngetArgumentValue() result for some common arguments\n\\<ul",">","\n\\<li",">",'Argument("key").getArgumentValue() ==',">"," Argument(null) \\</li",">","\n\\<li",">",'Argument("key=value").getArgumentValue() ==',">",' Argument("value")\n\\</li',">","\n\\<li",">",'Argument("key=").getArgumentValue() ==',">",' Argument("") \\</li',">","\n\\<li",">",'Argument("--key=value").getArgumentValue() ==',">",' Argument("value")\n\\</li',">","\n\\<li",">",'Argument("--!key=value").getArgumentValue() ==',">",' Argument("value")\n\\</li',">","\n\\<li",">",'Argument("--!//key=value").getArgumentValue() ==',">",'\nArgument("value") \\</li',">","\n\\</ul",">"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] NutsArgument public argumentValue\npublic NutsArgument getArgumentValue()\n")),Object(r.b)("h4",{id:"-boolean"},"\ud83d\udcc4\ud83c\udf9b boolean"),Object(r.b)("p",null,'test if the argument is valid boolean. a valid boolean mush match one of\nthe following regular expressions :\n"true|enable|enabled|yes|always|y|on|ok|t" : will be evaluated as true\nboolean. "false|disable|disabled|no|none|never|n|off|ko" : will be\nevaluated as false boolean. In both cases, this method returns true.\nOtherwise, it will return false.'),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] boolean public boolean\npublic boolean isBoolean()\n")),Object(r.b)("h4",{id:"-booleanvalue"},"\ud83d\udcc4\ud83c\udf9b booleanValue"),Object(r.b)("p",null,"parse argument\\'s value as boolean equivalent to\n","{","\\@code getArgumentValue().getBoolean()","}"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] boolean public booleanValue\npublic boolean getBooleanValue()\n")),Object(r.b)("h4",{id:"-double"},"\ud83d\udcc4\ud83c\udf9b double"),Object(r.b)("p",null,"parse number and return double."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] double public double\npublic double getDouble()\n")),Object(r.b)("h4",{id:"-enabled"},"\ud83d\udcc4\ud83c\udf9b enabled"),Object(r.b)("p",null,"false if option is in one of the following forms :\n\\<ul",">","\n\\<li",">","-//name\\</li",">","\n\\<li",">","--//name\\</li",">","\n\\</ul",">","\nwhere name is any valid identifier"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] boolean public enabled\npublic boolean isEnabled()\n")),Object(r.b)("h4",{id:"-int"},"\ud83d\udcc4\ud83c\udf9b int"),Object(r.b)("p",null,"parse number and return integer."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] int public int\npublic int getInt()\n")),Object(r.b)("h4",{id:"-keyvalue"},"\ud83d\udcc4\ud83c\udf9b keyValue"),Object(r.b)("p",null,"true if the argument is in the form key=value"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] boolean public keyValue\npublic boolean isKeyValue()\n")),Object(r.b)("h4",{id:"-keyvalueseparator"},"\ud83d\udcc4\ud83c\udf9b keyValueSeparator"),Object(r.b)("p",null,"return query value separator"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] String public keyValueSeparator\npublic String getKeyValueSeparator()\n")),Object(r.b)("h4",{id:"-long"},"\ud83d\udcc4\ud83c\udf9b long"),Object(r.b)("p",null,"parse number and return long."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] long public long\npublic long getLong()\n")),Object(r.b)("h4",{id:"-negated"},"\ud83d\udcc4\ud83c\udf9b negated"),Object(r.b)("p",null,"true if option is in one of the following forms :\n\\<ul",">","\n\\<li",">","-!name","[","=...]\\</li",">","\n\\<li",">","--!name","[","=...]\\</li",">","\n\\<li",">","!name","[","=...]\\</li",">","\n\\</ul",">","\nwhere name is any valid identifier"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] boolean public negated\npublic boolean isNegated()\n")),Object(r.b)("h4",{id:"-nonoption"},"\ud83d\udcc4\ud83c\udf9b nonOption"),Object(r.b)("p",null,"true if the argument do not start with \\'-\\' or \\'+\\' or is blank. this is\nequivalent to ","{","\\@code !isOption()","}","."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] boolean public nonOption\npublic boolean isNonOption()\n")),Object(r.b)("h4",{id:"-option"},"\ud83d\udcc4\ud83c\udf9b option"),Object(r.b)("p",null,"true if the argument starts with \\'-\\' or \\'+\\'"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] boolean public option\npublic boolean isOption()\n")),Object(r.b)("h4",{id:"-string"},"\ud83d\udcc4\ud83c\udf9b string"),Object(r.b)("p",null,"string representation of the argument or null"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] String public string\npublic String getString()\n")),Object(r.b)("h4",{id:"-stringkey"},"\ud83d\udcc4\ud83c\udf9b stringKey"),Object(r.b)("p",null,"return key part (never null) of the argument. The key does not include\nneither ! nor // or = argument parts as they are parsed separately. Here\nare some examples of getStringKey() result for some common arguments\n\\<ul",">","\n\\<li",">",'Argument("key").getArgumentKey() ==',">",' "key" \\</li',">","\n\\<li",">",'Argument("key=value").getArgumentKey() ==',">",' "key" \\</li',">","\n\\<li",">",'Argument("--key=value").getArgumentKey() ==',">",' "--key"\n\\</li',">","\n\\<li",">",'Argument("--!key=value").getArgumentKey() ==',">",' "--key"\n\\</li',">","\n\\<li",">",'Argument("--!//key=value").getArgumentKey() ==',">",' "--key"\n\\</li',">","\n\\<li",">",'Argument("--//!key=value").getArgumentKey() ==',">",' "--key"\n\\</li',">","\n\\</ul",">","\nequivalent to ","{","\\@code getArgumentKey().getString()","}"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] String public stringKey\npublic String getStringKey()\n")),Object(r.b)("h4",{id:"-stringoptionname"},"\ud83d\udcc4\ud83c\udf9b stringOptionName"),Object(r.b)("p",null,"return option key part excluding prefix (\\'-\\' and \\'--\\')"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] String public stringOptionName\npublic String getStringOptionName()\n")),Object(r.b)("h4",{id:"-stringoptionprefix"},"\ud83d\udcc4\ud83c\udf9b stringOptionPrefix"),Object(r.b)("p",null,"return option prefix part  (\\'-\\' and \\'--\\')"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] String public stringOptionPrefix\npublic String getStringOptionPrefix()\n")),Object(r.b)("h4",{id:"-stringvalue"},"\ud83d\udcc4\ud83c\udf9b stringValue"),Object(r.b)("p",null,"equivalent to ","{","\\@code getArgumentValue().getString()","}"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] String public stringValue\npublic String getStringValue()\n")),Object(r.b)("h3",{id:"-instance-methods"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-getbooleandefaultvalue"},"\u2699 getBoolean(defaultValue)"),Object(r.b)("p",null,"return boolean value if the current argument can be parsed as valid\nboolean of defaultValue if not"),Object(r.b)("p",null," \"true|enable|enabled|yes|always|y|on|ok|t\" are considered \\'true\\'.\n\"false|disable|disabled|no|none|never|n|off|ko\" are considered \\'false\\'."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Boolean getBoolean(Boolean defaultValue)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":Boolean"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Boolean defaultValue")," : default value")),Object(r.b)("h4",{id:"-getdoubledefaultvalue"},"\u2699 getDouble(defaultValue)"),Object(r.b)("p",null,"parse number and return double or ","{","\\@code defaultValue","}"," if not parsable."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"double getDouble(double defaultValue)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":double"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"double defaultValue")," : defaultValue")),Object(r.b)("h4",{id:"-getintdefaultvalue"},"\u2699 getInt(defaultValue)"),Object(r.b)("p",null,"parse number and return integer or ","{","\\@code defaultValue","}"," if not parsable."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int getInt(int defaultValue)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":int"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"int defaultValue")," : defaultValue")),Object(r.b)("h4",{id:"-getlongdefaultvalue"},"\u2699 getLong(defaultValue)"),Object(r.b)("p",null,"parse number and return long or ","{","\\@code defaultValue","}"," if not parsable."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"long getLong(long defaultValue)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":long"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"long defaultValue")," : defaultValue")),Object(r.b)("h4",{id:"-getstringdefaultvalue"},"\u2699 getString(defaultValue)"),Object(r.b)("p",null,"string representation of the argument or the given defaultValue"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"String getString(String defaultValue)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":String"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String defaultValue")," : returned when this argument references null value")),Object(r.b)("h4",{id:"-getstringvaluedefaultvalue"},"\u2699 getStringValue(defaultValue)"),Object(r.b)("p",null,"equivalent to ","{","\\@code getArgumentValue().getString(value)","}"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"String getStringValue(String defaultValue)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":String"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String defaultValue")," : default value")),Object(r.b)("h4",{id:"-required"},"\u2699 required()"),Object(r.b)("p",null,"Throw an exception if the argument is null"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument required()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("h2",{id:"-nutsargumentcandidate"},"\u2615 NutsArgumentCandidate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public interface net.vpc.app.nuts.NutsArgumentCandidate\n")),Object(r.b)("p",null," Argument Candidate used in Auto Complete."),Object(r.b)("p",null," Created by vpc on 3/7/17."),Object(r.b)("p",null," \\@since 0.5.5\n\\@category Command Line"),Object(r.b)("h3",{id:"-instance-properties-1"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-display"},"\ud83d\udcc4\ud83c\udf9b display"),Object(r.b)("p",null,"human display"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] String public display\npublic String getDisplay()\n")),Object(r.b)("h4",{id:"-value"},"\ud83d\udcc4\ud83c\udf9b value"),Object(r.b)("p",null,"argument value"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] String public value\npublic String getValue()\n")),Object(r.b)("h2",{id:"-nutsargumentname"},"\u2615 NutsArgumentName"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public interface net.vpc.app.nuts.NutsArgumentName\n")),Object(r.b)("p",null," Non Option Argument specification"),Object(r.b)("p",null," \\@author vpc\n\\@since 0.5.5\n\\@category Command Line"),Object(r.b)("h3",{id:"-instance-properties-2"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-name"},"\ud83d\udcc4\ud83c\udf9b name"),Object(r.b)("p",null,"argument name"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] String public name\npublic String getName()\n")),Object(r.b)("h3",{id:"-instance-methods-1"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-getcandidatescontext"},"\u2699 getCandidates(context)"),Object(r.b)("p",null,"argument candidate values"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"List getCandidates(NutsCommandAutoComplete context)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":List"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsCommandAutoComplete context")," : autocomplete")),Object(r.b)("h2",{id:"-nutsargumenttype"},"\u2615 NutsArgumentType"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public final net.vpc.app.nuts.NutsArgumentType\n")),Object(r.b)("p",null," Argument parse Type"),Object(r.b)("p",null," \\@author vpc\n\\@since 0.5.5\n\\@category Command Line"),Object(r.b)("h3",{id:"-constant-fields"},"\ud83d\udce2\u2744 Constant Fields"),Object(r.b)("h4",{id:"-any"},"\ud83d\udce2\u2744 ANY"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public static final NutsArgumentType ANY\n")),Object(r.b)("h4",{id:"-boolean-1"},"\ud83d\udce2\u2744 BOOLEAN"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public static final NutsArgumentType BOOLEAN\n")),Object(r.b)("h4",{id:"-string-1"},"\ud83d\udce2\u2744 STRING"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public static final NutsArgumentType STRING\n")),Object(r.b)("h3",{id:"-static-methods"},"\ud83d\udce2\u2699 Static Methods"),Object(r.b)("h4",{id:"-valueofname"},"\ud83d\udce2\u2699 valueOf(name)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgumentType valueOf(String name)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgumentType"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String name")," : ")),Object(r.b)("h4",{id:"-values"},"\ud83d\udce2\u2699 values()"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgumentType\\[] values()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgumentType","[","]"),Object(r.b)("h3",{id:"-instance-methods-2"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-id"},"\u2699 id()"),Object(r.b)("p",null,"lower cased identifier."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"String id()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":String"),Object(r.b)("h2",{id:"-nutscommandautocomplete"},"\u2615 NutsCommandAutoComplete"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public interface net.vpc.app.nuts.NutsCommandAutoComplete\n")),Object(r.b)("p",null," Auto Complete Helper class used to collect argument candidates\n\\@author vpc\n\\@since 0.5.5\n\\@category Command Line"),Object(r.b)("h3",{id:"-instance-properties-3"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-candidates"},"\ud83d\udcc4\ud83c\udf9b candidates"),Object(r.b)("p",null,"current candidates"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] List public candidates\npublic List getCandidates()\n")),Object(r.b)("h4",{id:"-currentwordindex"},"\ud83d\udcc4\ud83c\udf9b currentWordIndex"),Object(r.b)("p",null,"candidates index"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] int public currentWordIndex\npublic int getCurrentWordIndex()\n")),Object(r.b)("h4",{id:"-line"},"\ud83d\udcc4\ud83c\udf9b line"),Object(r.b)("p",null,"command line string"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] String public line\npublic String getLine()\n")),Object(r.b)("h4",{id:"-session"},"\ud83d\udcc4\ud83c\udf9b session"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] NutsSession public session\npublic NutsSession getSession()\n")),Object(r.b)("h4",{id:"-words"},"\ud83d\udcc4\ud83c\udf9b words"),Object(r.b)("p",null,"command line arguments"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] List public words\npublic List getWords()\n")),Object(r.b)("h4",{id:"-workspace"},"\ud83d\udcc4\ud83c\udf9b workspace"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] NutsWorkspace public workspace\npublic NutsWorkspace getWorkspace()\n")),Object(r.b)("h3",{id:"-instance-methods-3"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-addcandidatevalue"},"\u2699 addCandidate(value)"),Object(r.b)("p",null,"add candidate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"void addCandidate(NutsArgumentCandidate value)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsArgumentCandidate value")," : candidate")),Object(r.b)("h4",{id:"-gett"},"\u2699 get(t)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Object get(Class t)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":Object"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Class t")," : ")),Object(r.b)("h2",{id:"-nutscommandautocompletebase"},"\u2615 NutsCommandAutoCompleteBase"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public abstract net.vpc.app.nuts.NutsCommandAutoCompleteBase\n")),Object(r.b)("p",null," Base (Abstract) implementation of NutsCommandAutoComplete\n\\@author vpc\n\\@since 0.5.5\n\\@category Command Line"),Object(r.b)("h3",{id:"\ud83e\ude84-constructors"},"\ud83e\ude84 Constructors"),Object(r.b)("h4",{id:"\ud83e\ude84-nutscommandautocompletebase"},"\ud83e\ude84 NutsCommandAutoCompleteBase()"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandAutoCompleteBase()\n")),Object(r.b)("h3",{id:"-instance-properties-4"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-candidates-1"},"\ud83d\udcc4\ud83c\udf9b candidates"),Object(r.b)("p",null,"possible candidates"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] List public candidates\npublic List getCandidates()\n")),Object(r.b)("h4",{id:"-workspace-1"},"\ud83d\udcc4\ud83c\udf9b workspace"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] NutsWorkspace public workspace\npublic NutsWorkspace getWorkspace()\n")),Object(r.b)("h3",{id:"-instance-methods-4"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-addcandidatevalue-1"},"\u2699 addCandidate(value)"),Object(r.b)("p",null,"add candidate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"void addCandidate(NutsArgumentCandidate value)\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsArgumentCandidate value")," : candidate")),Object(r.b)("h4",{id:"-addcandidatesimplvalue"},"\u2699 addCandidatesImpl(value)"),Object(r.b)("p",null,"simple add candidates implementation"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgumentCandidate addCandidatesImpl(NutsArgumentCandidate value)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgumentCandidate"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsArgumentCandidate value")," : candidate")),Object(r.b)("h4",{id:"-gett-1"},"\u2699 get(t)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Object get(Class t)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":Object"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Class t")," : ")),Object(r.b)("h2",{id:"-nutscommandexecoptions"},"\u2615 NutsCommandExecOptions"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public net.vpc.app.nuts.NutsCommandExecOptions\n")),Object(r.b)("p",null," Command execution options\n\\@author vpc\n\\@since 0.5.4\n\\@category Command Line"),Object(r.b)("h3",{id:"\ud83e\ude84-constructors-1"},"\ud83e\ude84 Constructors"),Object(r.b)("h4",{id:"\ud83e\ude84-nutscommandexecoptions"},"\ud83e\ude84 NutsCommandExecOptions()"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandExecOptions()\n")),Object(r.b)("h3",{id:"-instance-properties-5"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-directory"},"\ud83d\udcdd\ud83c\udf9b directory"),Object(r.b)("p",null,"execution directory"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsCommandExecOptions public directory\npublic String getDirectory()\npublic NutsCommandExecOptions setDirectory(directory)\n")),Object(r.b)("h4",{id:"-env"},"\ud83d\udcdd\ud83c\udf9b env"),Object(r.b)("p",null,"execution environment variables"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsCommandExecOptions public env\npublic Map getEnv()\npublic NutsCommandExecOptions setEnv(env)\n")),Object(r.b)("h4",{id:"-executiontype"},"\ud83d\udcdd\ud83c\udf9b executionType"),Object(r.b)("p",null,"execution type"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsCommandExecOptions public executionType\npublic NutsExecutionType getExecutionType()\npublic NutsCommandExecOptions setExecutionType(executionType)\n")),Object(r.b)("h4",{id:"-executoroptions"},"\ud83d\udcdd\ud83c\udf9b executorOptions"),Object(r.b)("p",null,"execution options"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsCommandExecOptions public executorOptions\npublic String\\[] getExecutorOptions()\npublic NutsCommandExecOptions setExecutorOptions(executorOptions)\n")),Object(r.b)("h4",{id:"-failfast"},"\ud83d\udcdd\ud83c\udf9b failFast"),Object(r.b)("p",null,"when fail fast,non zero exit value will raise NutsExecutionException"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsCommandExecOptions public failFast\npublic boolean isFailFast()\npublic NutsCommandExecOptions setFailFast(failFast)\n")),Object(r.b)("h3",{id:"-instance-methods-5"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-equalso"},"\u2699 equals(o)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean equals(Object o)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":boolean"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Object o")," : ")),Object(r.b)("h4",{id:"-hashcode"},"\u2699 hashCode()"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int hashCode()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":int"),Object(r.b)("h4",{id:"-tostring"},"\u2699 toString()"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"String toString()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":String"),Object(r.b)("h2",{id:"-nutscommandline"},"\u2615 NutsCommandLine"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public interface net.vpc.app.nuts.NutsCommandLine\n")),Object(r.b)("p",null," Simple Command line parser implementation. The command line supports\narguments in the following forms :\n\\<ul",">","\n\\<li",">"," non option arguments : any argument that does not start with \\'-\\'\\</li",">"),Object(r.b)("p",null," \\<li",">","\nlong option arguments : any argument that starts with a single \\'--\\' in the\nform of\n\\<pre",">","--","[","//","]","[","!","]","?","[","^=]",Object(r.b)("em",{parentName:"p"},"[","=."),"]\\</pre",">","\n\\<ul",">","\n\\<li",">","// means disabling the option\\</li",">","\n\\<li",">","! means switching (to \\'false\\') the option\\'s value\\</li",">","\n\\<li",">","the string before the \\'=\\' is the option\\'s key\\</li",">","\n\\<li",">","the string after the \\'=\\' is the option\\'s value\\</li",">","\n\\</ul",">","\nExamples :\n\\<ul",">","\n\\<li",">","--!enable : option \\'enable\\' with \\'false\\' value\\</li",">","\n\\<li",">","--enable=yes : option \\'enable\\' with \\'yes\\' value\\</li",">","\n\\<li",">","--!enable=yes : invalid option (no error will be thrown but the result\nis undefined)\\</li",">","\n\\</ul",">","\n\\</li",">","\n\\<li",">","\nsimple option arguments : any argument that starts with a single \\'-\\' in the\nform of\n\\<pre",">","-","[","//","]","[","!]?","[","a","-","z","]","[","=.*]\\</pre",">"," This is actually very similar to long options\n\\<ul",">","\n\\<li",">","-!enable (with expandSimpleOptions=false) : option \\'enable\\' with \\'false\\'\nvalue\\</li",">","\n\\<li",">","--enable=yes : option \\'enable\\' with \\'yes\\' value\\</li",">","\n\\<li",">","--!enable=yes : invalid option (no error will be thrown but the result\nis undefined)\\</li",">","\n\\</ul",">"),Object(r.b)("p",null," \\</li",">","\n\\<li",">","\ncondensed simple option arguments : any argument that starts with a single \\'-\\' in the\nform of\n\\<pre",">","-","[","//](","[","!]?","[","a","-","z","]",")+","[","=.*]\\</pre",">"," This is actually very similar to long options\nand is parsable when expandSimpleOptions=true. When activating expandSimpleOptions, multi\ncharacters key will be expanded as multiple separate simple options Examples\n:\n\\<ul",">","\n\\<li",">","-!enable (with expandSimpleOptions=false) : option \\'enable\\' with \\'false\\'\nvalue\\</li",">","\n\\<li",">","--enable=yes : option \\'enable\\' with \\'yes\\' value\\</li",">","\n\\<li",">","--!enable=yes : invalid option (no error will be thrown but the result\nis undefined)\\</li",">","\n\\</ul",">"),Object(r.b)("p",null," \\</li",">"),Object(r.b)("p",null," \\<li",">","long option arguments : any argument that starts with a \\'--\\' \\</li",">","\n\\</ul",">","\noption may start with \\'!\\' to switch armed flags expandSimpleOptions : when\nactivated"),Object(r.b)("p",null," \\@author vpc\n\\@since 0.5.5\n\\@category Command Line"),Object(r.b)("h3",{id:"-instance-properties-6"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-arguments"},"\u270f\ud83c\udf9b arguments"),Object(r.b)("p",null,"reset this instance with the given arguments"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[write-only] NutsCommandLine public arguments\npublic NutsCommandLine setArguments(arguments)\n")),Object(r.b)("h4",{id:"-autocomplete"},"\ud83d\udcdd\ud83c\udf9b autoComplete"),Object(r.b)("p",null,"set autocomplete instance"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsCommandLine public autoComplete\npublic NutsCommandAutoComplete getAutoComplete()\npublic NutsCommandLine setAutoComplete(autoComplete)\n")),Object(r.b)("h4",{id:"-autocompletemode"},"\ud83d\udcc4\ud83c\udf9b autoCompleteMode"),Object(r.b)("p",null,"true if auto complete instance is registered (is not null)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] boolean public autoCompleteMode\npublic boolean isAutoCompleteMode()\n")),Object(r.b)("h4",{id:"-commandname"},"\ud83d\udcdd\ud83c\udf9b commandName"),Object(r.b)("p",null,"set command name that will be used as an extra info in thrown exceptions"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsCommandLine public commandName\npublic String getCommandName()\npublic NutsCommandLine setCommandName(commandName)\n")),Object(r.b)("h4",{id:"-empty"},"\ud83d\udcc4\ud83c\udf9b empty"),Object(r.b)("p",null,"true if no more arguments are available"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] boolean public empty\npublic boolean isEmpty()\n")),Object(r.b)("h4",{id:"-execmode"},"\ud83d\udcc4\ud83c\udf9b execMode"),Object(r.b)("p",null,"true if auto complete instance is not registered (is null)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] boolean public execMode\npublic boolean isExecMode()\n")),Object(r.b)("h4",{id:"-expandsimpleoptions"},"\ud83d\udcdd\ud83c\udf9b expandSimpleOptions"),Object(r.b)("p",null,"enable or disable simple option expansion"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsCommandLine public expandSimpleOptions\npublic boolean isExpandSimpleOptions()\npublic NutsCommandLine setExpandSimpleOptions(expand)\n")),Object(r.b)("h4",{id:"-specialsimpleoptions"},"\ud83d\udcc4\ud83c\udf9b specialSimpleOptions"),Object(r.b)("p",null,"list of registered simple options"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] String\\[] public specialSimpleOptions\npublic String\\[] getSpecialSimpleOptions()\n")),Object(r.b)("h4",{id:"-wordindex"},"\ud83d\udcc4\ud83c\udf9b wordIndex"),Object(r.b)("p",null,"current word index"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] int public wordIndex\npublic int getWordIndex()\n")),Object(r.b)("h3",{id:"-instance-methods-6"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-acceptvalues"},"\u2699 accept(values)"),Object(r.b)("p",null,"true if arguments start with the given suite."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean accept(String\\[] values)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":boolean"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String","[","] values")," : arguments suite")),Object(r.b)("h4",{id:"-acceptindex-values"},"\u2699 accept(index, values)"),Object(r.b)("p",null,"true if arguments start at index ","{","\\@code index","}"," with the given suite."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean accept(int index, String\\[] values)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":boolean"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"int index")," : starting index"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String","[","] values")," : arguments suite")),Object(r.b)("h4",{id:"-containsname"},"\u2699 contains(name)"),Object(r.b)("p",null,"return true if any argument is equal to the given name"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean contains(String name)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":boolean"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String name")," : argument name")),Object(r.b)("h4",{id:"-findname"},"\u2699 find(name)"),Object(r.b)("p",null,"find first argument with argument key name"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument find(String name)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String name")," : argument key name")),Object(r.b)("h4",{id:"-getindex"},"\u2699 get(index)"),Object(r.b)("p",null,"return argument at given index"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument get(int index)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"int index")," : argument index")),Object(r.b)("h4",{id:"-hasnext"},"\u2699 hasNext()"),Object(r.b)("p",null,"true if there still at least one argument to consume"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean hasNext()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":boolean"),Object(r.b)("h4",{id:"-indexofname"},"\u2699 indexOf(name)"),Object(r.b)("p",null,"first  argument index (or -1 if not found) with value ","{","\\@code name","}"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int indexOf(String name)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":int"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String name")," : argument key name")),Object(r.b)("h4",{id:"-isnonoptionindex"},"\u2699 isNonOption(index)"),Object(r.b)("p",null,"true if the argument and index exists and is non option"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean isNonOption(int index)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":boolean"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"int index")," : index")),Object(r.b)("h4",{id:"-isoptionindex"},"\u2699 isOption(index)"),Object(r.b)("p",null,"true if the argument and index exists and is option"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean isOption(int index)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":boolean"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"int index")," : index")),Object(r.b)("h4",{id:"-isspecialsimpleoptionoption"},"\u2699 isSpecialSimpleOption(option)"),Object(r.b)("p",null,"test if the option is a registered simple option\nThis method helps considering \\'-version\\' as a single simple options when\n","{","\\@code isExpandSimpleOptions()==true","}"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean isSpecialSimpleOption(String option)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":boolean"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String option")," : option")),Object(r.b)("h4",{id:"-length"},"\u2699 length()"),Object(r.b)("p",null,"number of arguments available to retrieve"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int length()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":int"),Object(r.b)("h4",{id:"-next"},"\u2699 next()"),Object(r.b)("p",null,"consume (remove) the first argument and return it return null if not\nargument is left"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument next()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("h4",{id:"-nextname"},"\u2699 next(name)"),Object(r.b)("p",null,"consume (remove) the first argument and return it while adding a hint to\nAuto Complete about expected argument candidates return null if not\nargument is left"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument next(NutsArgumentName name)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsArgumentName name")," : expected argument name")),Object(r.b)("h4",{id:"-nextnames"},"\u2699 next(names)"),Object(r.b)("p",null,"next argument with any value type (may having not a value). equivalent to\n","{","\\@code next(NutsArgumentType.ANY,names)","}"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument next(String\\[] names)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String","[","] names")," : names")),Object(r.b)("h4",{id:"-nextexpectvalue-names"},"\u2699 next(expectValue, names)"),Object(r.b)("p",null,"next argument with any value type (may having not a value)."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument next(NutsArgumentType expectValue, String\\[] names)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsArgumentType expectValue")," : expected value type"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String","[","] names")," : names")),Object(r.b)("h4",{id:"-nextbooleannames"},"\u2699 nextBoolean(names)"),Object(r.b)("p",null,"next argument with boolean value equivalent to\nnext(NutsArgumentType.STRING,names)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument nextBoolean(String\\[] names)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String","[","] names")," : names")),Object(r.b)("h4",{id:"-nextnonoption"},"\u2699 nextNonOption()"),Object(r.b)("p",null,"next argument if it exists and it is a non option. Return null in all\nother cases."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument nextNonOption()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("h4",{id:"-nextnonoptionname"},"\u2699 nextNonOption(name)"),Object(r.b)("p",null,"next argument if it exists and it is a non option. Return null in all\nother cases."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument nextNonOption(NutsArgumentName name)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsArgumentName name")," : argument specification (may be null)")),Object(r.b)("h4",{id:"-nextrequirednonoptionname"},"\u2699 nextRequiredNonOption(name)"),Object(r.b)("p",null,"next argument if it exists and it is a non option. Throw an error in all\nother cases."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument nextRequiredNonOption(NutsArgumentName name)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsArgumentName name")," : argument specification (may be null)")),Object(r.b)("h4",{id:"-nextstringnames"},"\u2699 nextString(names)"),Object(r.b)("p",null,"next argument with string value. equivalent to\nnext(NutsArgumentType.STRING,names)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument nextString(String\\[] names)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String","[","] names")," : names")),Object(r.b)("h4",{id:"-parselinecommandline"},"\u2699 parseLine(commandLine)"),Object(r.b)("p",null,"reset this instance with the given parsed arguments"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine parseLine(String commandLine)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsCommandLine"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String commandLine")," : to parse")),Object(r.b)("h4",{id:"-peek"},"\u2699 peek()"),Object(r.b)("p",null,"the first argument to consume without removing/consuming it or null if\nnot argument is left"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument peek()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("h4",{id:"-pushbackarg"},"\u2699 pushBack(arg)"),Object(r.b)("p",null,"push back argument so that it will be first to be retrieved (using next methods)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine pushBack(NutsArgument arg)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsCommandLine"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsArgument arg")," : argument")),Object(r.b)("h4",{id:"-registerspecialsimpleoptionoption"},"\u2699 registerSpecialSimpleOption(option)"),Object(r.b)("p",null,"register ","{","\\@code options","}"," as simple (with simple \\'-\\') option.\nThis method helps considering \\'-version\\' as a single simple options when\n","{","\\@code isExpandSimpleOptions()==true","}"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine registerSpecialSimpleOption(String option)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsCommandLine"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String option")," : option")),Object(r.b)("h4",{id:"-requirenonoption"},"\u2699 requireNonOption()"),Object(r.b)("p",null,"throw exception if command line is empty or the first word is an option"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine requireNonOption()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsCommandLine"),Object(r.b)("h4",{id:"-required-1"},"\u2699 required()"),Object(r.b)("p",null,"throw exception if command line is empty"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine required()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsCommandLine"),Object(r.b)("h4",{id:"-requirederrormessage"},"\u2699 required(errorMessage)"),Object(r.b)("p",null,"throw exception if command line is empty"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine required(String errorMessage)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsCommandLine"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String errorMessage")," : message to throw")),Object(r.b)("h4",{id:"-skip"},"\u2699 skip()"),Object(r.b)("p",null,"skip next argument"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int skip()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":int"),Object(r.b)("h4",{id:"-skipcount"},"\u2699 skip(count)"),Object(r.b)("p",null,"consume ","{","\\@code count","}"," words and return how much it was able to consume"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int skip(int count)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":int"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"int count")," : count")),Object(r.b)("h4",{id:"-skipall"},"\u2699 skipAll()"),Object(r.b)("p",null,"consume all words and return consumed count"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int skipAll()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":int"),Object(r.b)("h4",{id:"-toarray"},"\u2699 toArray()"),Object(r.b)("p",null,"returns un-parsed (or partially parsed) available arguments"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"String\\[] toArray()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":String","[","]"),Object(r.b)("h4",{id:"-unexpectedargument"},"\u2699 unexpectedArgument()"),Object(r.b)("p",null,"throw exception if command line is not empty"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine unexpectedArgument()\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsCommandLine"),Object(r.b)("h4",{id:"-unexpectedargumenterrormessage"},"\u2699 unexpectedArgument(errorMessage)"),Object(r.b)("p",null,"throw exception if command line is not empty"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine unexpectedArgument(String errorMessage)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsCommandLine"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String errorMessage")," : message to throw")),Object(r.b)("h4",{id:"-unregisterspecialsimpleoptionoption"},"\u2699 unregisterSpecialSimpleOption(option)"),Object(r.b)("p",null,"unregister ","{","\\@code options","}"," as simple (with simple \\'-\\') option.\nThis method helps considering \\'-version\\' as a single simple options when\n","{","\\@code isExpandSimpleOptions()==true","}"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine unregisterSpecialSimpleOption(String option)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsCommandLine"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String option")," : option")),Object(r.b)("h2",{id:"-nutscommandlineformat"},"\u2615 NutsCommandLineFormat"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public interface net.vpc.app.nuts.NutsCommandLineFormat\n")),Object(r.b)("p",null," Simple Command line Format"),Object(r.b)("p",null," \\@author vpc\n\\@since 0.5.7\n\\@category Command Line"),Object(r.b)("h3",{id:"-instance-properties-7"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-session-1"},"\u270f\ud83c\udf9b session"),Object(r.b)("p",null,"update session"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[write-only] NutsCommandLineFormat public session\npublic NutsCommandLineFormat setSession(session)\n")),Object(r.b)("h4",{id:"-value-1"},"\ud83d\udcdd\ud83c\udf9b value"),Object(r.b)("p",null,"set command line from parsed string"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsCommandLineFormat public value\npublic NutsCommandLine getValue()\npublic NutsCommandLineFormat setValue(args)\n")),Object(r.b)("h3",{id:"-instance-methods-7"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-configureskipunsupported-args"},"\u2699 configure(skipUnsupported, args)"),Object(r.b)("p",null,"configure the current command with the given arguments. This is an\noverride of the ","{","\\@link NutsConfigurable#configure(boolean, java.lang.String...) ","}","\nto help return a more specific return type;"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLineFormat configure(boolean skipUnsupported, String\\[] args)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsCommandLineFormat"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"boolean skipUnsupported")," : when true, all unsupported options are skipped"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String","[","] args")," : argument to configure with")),Object(r.b)("h4",{id:"-createargs"},"\u2699 create(args)"),Object(r.b)("p",null,"return new Command line instance"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine create(String\\[] args)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsCommandLine"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String","[","] args")," : command line args")),Object(r.b)("h4",{id:"-createargs-1"},"\u2699 create(args)"),Object(r.b)("p",null,"return new Command line instance"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine create(List args)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsCommandLine"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"List args")," : command line args")),Object(r.b)("h4",{id:"-createargumentargument"},"\u2699 createArgument(argument)"),Object(r.b)("p",null,"create new argument"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument createArgument(String argument)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgument"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String argument")," : new argument")),Object(r.b)("h4",{id:"-createcandidatevalue"},"\u2699 createCandidate(value)"),Object(r.b)("p",null,"create argument candidate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgumentCandidate createCandidate(String value)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgumentCandidate"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String value")," : candidate value")),Object(r.b)("h4",{id:"-createcandidatevalue-label"},"\u2699 createCandidate(value, label)"),Object(r.b)("p",null,"create argument candidate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgumentCandidate createCandidate(String value, String label)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgumentCandidate"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String value")," : candidate value"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String label")," : candidate label")),Object(r.b)("h4",{id:"-createnametype"},"\u2699 createName(type)"),Object(r.b)("p",null,"create argument name"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgumentName createName(String type)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgumentName"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String type")," : create argument type")),Object(r.b)("h4",{id:"-createnametype-label"},"\u2699 createName(type, label)"),Object(r.b)("p",null,"create argument name"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgumentName createName(String type, String label)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsArgumentName"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String type")," : argument type"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String label")," : argument label")),Object(r.b)("h4",{id:"-parseline"},"\u2699 parse(line)"),Object(r.b)("p",null,"return new Command line instance"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine parse(String line)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":NutsCommandLine"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String line")," : command line to parse")),Object(r.b)("h2",{id:"-nutscommandlineprocessor"},"\u2615 NutsCommandLineProcessor"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public interface net.vpc.app.nuts.NutsCommandLineProcessor\n")),Object(r.b)("p",null," \\@category Command Line"),Object(r.b)("h3",{id:"-instance-methods-8"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-exec"},"\u2699 exec()"),Object(r.b)("p",null,"execute options, called after all options was processed and\ncmdLine.isExecMode() return true."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"void exec()\n")),Object(r.b)("h4",{id:"-processnonoptionargument-cmdline"},"\u2699 processNonOption(argument, cmdLine)"),Object(r.b)("p",null,"process the given non option argument that was peeked from the command line.\nImplementations \\<strong",">","MUST\\</strong",">",' call one of\nthe "next" methods to'),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean processNonOption(NutsArgument argument, NutsCommandLine cmdLine)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":boolean"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsArgument argument")," : peeked argument"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsCommandLine cmdLine")," : associated commandline")),Object(r.b)("h4",{id:"-processoptionargument-cmdline"},"\u2699 processOption(argument, cmdLine)"),Object(r.b)("p",null,"process the given option argument that was peeked from the command line.\nImplementations \\<strong",">","MUST\\</strong",">",' call one of\nthe "next" methods to'),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean processOption(NutsArgument argument, NutsCommandLine cmdLine)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":boolean"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsArgument argument")," : peeked argument"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsCommandLine cmdLine")," : associated commandline")),Object(r.b)("h2",{id:"-nutsconfigurable"},"\u2615 NutsConfigurable"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public interface net.vpc.app.nuts.NutsConfigurable\n")),Object(r.b)("p",null," Configurable interface define a extensible way to configure nuts commands\nand objects using simple argument line options.\n\\@author vpc\n\\@since 0.5.5\n\\@category Command Line"),Object(r.b)("h3",{id:"-instance-methods-9"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-configureskipunsupported-args-1"},"\u2699 configure(skipUnsupported, args)"),Object(r.b)("p",null,"configure the current command with the given arguments."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Object configure(boolean skipUnsupported, String\\[] args)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":Object"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"boolean skipUnsupported")," : when true, all unsupported options are skipped\nsilently"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"String","[","] args")," : arguments to configure with")),Object(r.b)("h4",{id:"-configureskipunsupported-commandline"},"\u2699 configure(skipUnsupported, commandLine)"),Object(r.b)("p",null,"configure the current command with the given arguments."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean configure(boolean skipUnsupported, NutsCommandLine commandLine)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":boolean"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"boolean skipUnsupported")," : when true, all unsupported options are skipped\nsilently"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsCommandLine commandLine")," : arguments to configure with")),Object(r.b)("h4",{id:"-configurefirstcommandline"},"\u2699 configureFirst(commandLine)"),Object(r.b)("p",null,"ask ","{","\\@code this","}"," instance to configure with the very first argument of\n","{","\\@code commandLine","}",". If the first argument is not supported, return\n","{","\\@code false","}"," and consume (skip/read) the argument. If the argument\nrequired one or more parameters, these arguments are also consumed and\nfinally return ","{","\\@code true","}"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean configureFirst(NutsCommandLine commandLine)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"return"),":boolean"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"NutsCommandLine commandLine")," : arguments to configure with")))}o.isMDXComponent=!0}}]);