(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{101:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return b}));var a=t(0),r=t.n(a);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),u=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,b=p["".concat(o,".").concat(m)]||p[m]||d[m]||s;return t?r.a.createElement(b,i(i({ref:n},l),{},{components:t})):r.a.createElement(b,i({ref:n},l))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},81:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var a=t(2),r=t(6),s=(t(0),t(101)),o={id:"aliases",title:"Aliases",sidebar_label:"Aliases and Imports"},i={unversionedId:"concepts/aliases",id:"concepts/aliases",isDocsHomePage:!1,title:"Aliases",description:"Aliases, Imports and launchers, are three features in nuts where you can call artifacts with a simple word instead of using the full id. Indeed, usually, artifacts are uniquely identified by groupId, artifactId, version and classifier (whenever applicable). This is kind of cumbersome if most of the cases:",source:"@site/docs/concepts/aliases.md",permalink:"/nuts/docs/concepts/aliases",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/concepts/aliases.md",sidebar_label:"Aliases and Imports",sidebar:"someSidebar",previous:{title:"Troubleshooting",permalink:"/nuts/docs/info/troubleshooting"},next:{title:"Command Line Arguments",permalink:"/nuts/docs/concepts/commandline"}},c=[{value:"Imports",id:"imports",children:[]},{value:"Aliases",id:"aliases",children:[]},{value:"Launchers",id:"launchers",children:[]}],l={rightToc:c};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Aliases, Imports and launchers, are three features in nuts where you can call artifacts with a simple word instead of using the full id. Indeed, usually, artifacts are uniquely identified by groupId, artifactId, version and classifier (whenever applicable). This is kind of cumbersome if most of the cases:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"nuts net.thevpc.toolbox.nsh:nsh#0.8.3.0\n")),Object(s.b)("h2",{id:"imports"},"Imports"),Object(s.b)("p",null,"Imports help you discard groupId and call/install artifacts using only artifactId. You can as an example\nimport 'com.my-company' and as a result any artifact under 'com.mycompany' is resolved automatically.\nActually 'com.my-company:my-app' and 'com.my-company.my-app:my-app' are"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"nuts net.thevpc.toolbox.nsh:nsh#0.8.3.0\n# becomes\nnuts settings add import net.thevpc.toolbox\n# now call it simply with\nnuts nsh#0.8.3.0\n# or even simpler with\nnuts nsh\n")),Object(s.b)("p",null,"As a matter of fact, there are a couple of imports automatically defined 'net.thevpc' and 'net.thevpc.toolbox' "),Object(s.b)("h2",{id:"aliases"},"Aliases"),Object(s.b)("p",null,"Aliases help you define your own command by calling existing artifacts and defining some arguments as well. It is very similar to shell aliases where you define 'll' as and alias to '/bin/ls -l' for example."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"nuts net.thevpc.toolbox.nsh:nsh#0.8.3.0\n# becomes\nnuts settings add alias nshl='net.thevpc.toolbox.nsh:nsh#0.8.3.0 --list'\n# now call it simply with\nnuts nshl\n")),Object(s.b)("h2",{id:"launchers"},"Launchers"),Object(s.b)("p",null,"Launchers help you define your own system command by calling nuts with existing artifacts and even creating Desktop Environment Shortcuts and Icons (whenever GUI is applicable). "),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"nuts net.thevpc.toolbox.nsh:nsh#0.8.3.0\n# becomes\nnuts settings add launcher -- nshl='net.thevpc.toolbox.nsh:nsh#0.8.3.0 --list'\n# now call it simply with\nnuts nshl\n")))}u.isMDXComponent=!0}}]);