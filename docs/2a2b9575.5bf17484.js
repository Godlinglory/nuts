(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{121:function(e,n,t){"use strict";t.d(n,"a",(function(){return m}));var a=t(0),i=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),s=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,b=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return t?i.a.createElement(b,r(r({ref:n},c),{},{components:t})):i.a.createElement(b,r({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=d;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:a,p[1]=r;for(var c=2;c<o;c++)p[c]=t[c];return i.a.createElement.apply(null,p)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},69:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return r})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return s}));var a=t(2),i=t(6),o=(t(0),t(121)),p={id:"nutsApp",title:"Your first Application using nuts",sidebar_label:"Your first Application using nuts"},r={unversionedId:"dev/nutsApp",id:"dev/nutsApp",isDocsHomePage:!1,title:"Your first Application using nuts",description:"Running your application with Nuts",source:"@site/docs/dev/nuts-app.md",permalink:"/nuts/docs/dev/nutsApp",editUrl:"https://github.com/thevpc/nuts/edit/master/website/docs/dev/nuts-app.md",sidebar_label:"Your first Application using nuts",sidebar:"someSidebar",previous:{title:"Nuts Stream",permalink:"/nuts/docs/dev/nutsStream"},next:{title:"Building",permalink:"/nuts/docs/contributing/building"}},l=[{value:"Running your application with Nuts",id:"running-your-application-with-nuts",children:[]}],c={rightToc:l};function s(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(o.a)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.a)("h2",{id:"running-your-application-with-nuts"},"Running your application with Nuts"),Object(o.a)("p",null,"Lets take, step by step, an example of an application that you will run using ",Object(o.a)("inlineCode",{parentName:"p"},"nuts")," package manager"),Object(o.a)("p",null,"First we can create the project using your favourite IDE or using simply ",Object(o.a)("inlineCode",{parentName:"p"},"mvn")," command"),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{}),"mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-simple -DarchetypeVersion=1.4 -DinteractiveMode=false\n")),Object(o.a)("p",null,"We will have a fully generated java project"),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"~/> tree\n.\n\u2514\u2500\u2500 my-app\n    \u251c\u2500\u2500 pom.xml\n    \u2514\u2500\u2500 src\n        \u251c\u2500\u2500 main\n        \u2502   \u2514\u2500\u2500 java\n        \u2502       \u2514\u2500\u2500 com\n        \u2502           \u2514\u2500\u2500 mycompany\n        \u2502               \u2514\u2500\u2500 app\n        \u2502                   \u2514\u2500\u2500 App.java\n        \u2514\u2500\u2500 test\n            \u2514\u2500\u2500 java\n                \u2514\u2500\u2500 com\n                    \u2514\u2500\u2500 mycompany\n                        \u2514\u2500\u2500 app\n                            \u2514\u2500\u2500 AppTest.java\n\n")),Object(o.a)("p",null,"Now we will add some dependencies to the project. Let's add ",Object(o.a)("inlineCode",{parentName:"p"},"jexcelapi:jxl#2.4.2")," and update ",Object(o.a)("inlineCode",{parentName:"p"},"pom.xml")," consequently."),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.mycompany.app</groupId>\n    <artifactId>my-app</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <dependencies>\n        <dependency>\n            <groupId>jexcelapi</groupId>\n            <artifactId>jxl</artifactId>\n            <version>2.4.2</version>\n        </dependency>\n    </dependencies>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n    </properties>\n</project> \n')),Object(o.a)("p",null,"Now we update the App.java file"),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'package com.mycompany.app;\n\nimport java.io.File;\n\nimport jxl.Workbook;\nimport jxl.write.WritableWorkbook;\n\npublic class App {\n\n    public static void main(String[] args) {\n        try {\n            WritableWorkbook w = Workbook.createWorkbook(new File("any-file.xls"));\n            System.out.println("Workbook just created");\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n\n')),Object(o.a)("p",null,"finally we compile the app:"),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"mvn clean install\n")),Object(o.a)("p",null,"Of course, we won't be able to run the application yet. Would we? For this app to work there are several ways, all of\nthem are complicated and require modifying the ",Object(o.a)("inlineCode",{parentName:"p"},"pom.xml"),"  and even modifying the output jar. we can for instance generate an\noutput lib directory and update the ",Object(o.a)("inlineCode",{parentName:"p"},"META-INF")," file using ",Object(o.a)("inlineCode",{parentName:"p"},"maven-dependency-plugin"),".\n(see ",Object(o.a)("a",Object(a.a)({parentName:"p"},{href:"https://maven.apache.org/plugins/maven-shade-plugin"}),"https://maven.apache.org/plugins/maven-shade-plugin")," ; ",Object(o.a)("a",Object(a.a)({parentName:"p"},{href:"https://www.baeldung.com/executable-jar-with-maven"}),"https://www.baeldung.com/executable-jar-with-maven"),"). We\ncould also use ",Object(o.a)("inlineCode",{parentName:"p"},"maven-assembly-plugin")," to include the dependencies into the jar itself ('what the fat' jar!).\nAnother alternative is to use an uglier solution with ",Object(o.a)("inlineCode",{parentName:"p"},"maven-shade-plugin")," and blend libraries into the main jar. In\nall cases we need as well to configure ",Object(o.a)("inlineCode",{parentName:"p"},"maven-jar-plugin")," to specify the main class file."),Object(o.a)("p",null,"I am not exposing all solutions here. You can read this article for more\ndetails (",Object(o.a)("a",Object(a.a)({parentName:"p"},{href:"https://www.baeldung.com/executable-jar-with-maven"}),"https://www.baeldung.com/executable-jar-with-maven"),") but trust me, they all stink."),Object(o.a)("p",null,"Instead of that we will use ",Object(o.a)("inlineCode",{parentName:"p"},"nuts"),". In that case, actually we are already done, the app is already OK! We do not need\nto specify the main class neither are we required to bundle ",Object(o.a)("inlineCode",{parentName:"p"},"jxl")," and its dependencies. We only need to run the app.\nThat's it."),Object(o.a)("p",null,"Basically, you can install the application using its identifier ",Object(o.a)("inlineCode",{parentName:"p"},"com.mycompany.app:my-app"),". The latest version will be resolved."),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"nuts install com.mycompany.app:my-app\nnuts my-app\n")),Object(o.a)("p",null,"This will install the application and run it on the fly. Dependencies will be detected, resolved and downloaded. The\napplication is installed from local maven repository. It needs to be deployed to a public repository for it to be\npublicly accessible, however."),Object(o.a)("p",null,"We can also choose not to install the app and bundle it as a jar. No need for a public repository in that case:"),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"nuts -y com my-app-1.0.0-SNAPSHOT.jar\n")),Object(o.a)("p",null,"As we can see, ",Object(o.a)("inlineCode",{parentName:"p"},"nuts")," provides the simplest and the most elegant way to deploy your application."),Object(o.a)("p",null,"One question though. what happens if we define multiple main methods (in multiple public classes). It is handled as well\nby ",Object(o.a)("inlineCode",{parentName:"p"},"nuts")," seamlessly. It just asks, at runtime, for the appropriate class to run."),Object(o.a)("h1",{id:"using-nuts-application-framework"},"Using Nuts Application Framework"),Object(o.a)("p",null,"Using ",Object(o.a)("inlineCode",{parentName:"p"},"nuts")," is transparent as we have seen so far. It is transparent both at build time and runtime.\nHowever, ",Object(o.a)("inlineCode",{parentName:"p"},"nuts")," can provide our application a set of unique helpful features, such as install and uninstall hooks,\ncomprehensive command line support and so on."),Object(o.a)("p",null,"To create your first ",Object(o.a)("inlineCode",{parentName:"p"},"NAF")," application, you will need to add nuts as a dependency and change your ",Object(o.a)("inlineCode",{parentName:"p"},"pom.xml")," as follows:"),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-xml"}),'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.mycompany.app</groupId>\n    <artifactId>my-app</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <dependencies>\n        <dependency>\n            <groupId>net.thevpc.nuts</groupId>\n            <artifactId>nuts</artifactId>\n            <version>0.8.3</version>\n        </dependency>\n        <dependency>\n            <groupId>jexcelapi</groupId>\n            <artifactId>jxl</artifactId>\n            <version>2.4.2</version>\n        </dependency>\n    </dependencies>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n        <nuts.application>true</nuts.application>\n    </properties>\n</project> \n')),Object(o.a)("p",null,"Please take note that we have added a property ",Object(o.a)("inlineCode",{parentName:"p"},"nuts.application=true"),".\nActually this is not mandatory, but this will help ",Object(o.a)("inlineCode",{parentName:"p"},"nuts")," package manager detect that this application uses NAF before downloading its jar (the information will be available in the ",Object(o.a)("inlineCode",{parentName:"p"},"pom.xml")," descriptor on the remote repository)."),Object(o.a)("p",null,'Then we will add some cool features to our application. We write a dummy message whenever the application is installed, uninstalled or updated.\nWe will also add support to "--file=',"[path]",'" argument to specify the workbook path.'),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'package com.mycompany.app;\n\nimport java.io.File;\n\nimport jxl.Workbook;\nimport jxl.write.WritableWorkbook;\n\npublic class App implements NutsApplication {\n\n    public static void main(String[] args) {\n        // just create an instance and call runAndExit in the main method\n        new App().runAndExit(args);\n    }\n\n    @Override\n    public void run(NutsApplicationContext applicationContext) {\n        NutsSession s = applicationContext.getSession();\n        NutsCommandLine cmd = applicationContext.getCommandLine();\n        File file = new File("file.xls");\n        while (cmd.hasNext()) {\n            switch (cmd.getKey().getString()) {\n                case "--file": {\n                    NutsArgument a = cmd.nextString();\n                    file = new File(a.getStringValue());\n                    break;\n                }\n                case "--fill": {\n                    // process other options here ...\n                    break;\n                }\n                default: {\n                    s.configureLast(cmd);\n                }\n            }\n        }\n        try {\n            WritableWorkbook w = Workbook.createWorkbook(file);\n            s.out().printf("Workbook just created at %s%n", file);\n        } catch (Exception ex) {\n            ex.printStackTrace(s.err());\n        }\n    }\n\n    @Override\n    public void onInstallApplication(NutsApplicationContext applicationContext) {\n        NutsSession s = applicationContext.getSession();\n        s.out().printf("we are installing My Application : %s%n", applicationContext.getId());\n    }\n\n    @Override\n    public void onUninstallApplication(NutsApplicationContext applicationContext) {\n        NutsSession s = applicationContext.getSession();\n        s.out().printf("we are uninstalling My Application : %s%n", applicationContext.getId());\n    }\n\n    @Override\n    public void onUpdateApplication(NutsApplicationContext applicationContext) {\n        NutsSession s = applicationContext.getSession();\n        s.out().printf("we are updating My Application : %s%n", applicationContext.getId());\n    }\n}\n\n')),Object(o.a)("p",null,"Now we can install or uninstall the application and see the expected messages."),Object(o.a)("pre",null,Object(o.a)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"nuts -y install com.mycompany.app:my-app\nnuts -y uninstall com.mycompany.app:my-app\n")))}s.isMDXComponent=!0}}]);