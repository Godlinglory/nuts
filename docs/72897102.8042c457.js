(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{114:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),c=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=c(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),b=c(n),m=o,d=b["".concat(i,".").concat(m)]||b[m]||u[m]||r;return n?a.a.createElement(d,s(s({ref:t},l),{},{components:n})):a.a.createElement(d,s({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return c}));var o=n(2),a=n(6),r=(n(0),n(114)),i={id:"commandline",title:"Command Line Arguments",sidebar_label:"Command Line Arguments"},s={unversionedId:"concepts/commandline",id:"concepts/commandline",isDocsHomePage:!1,title:"Command Line Arguments",description:"`",source:"@site/docs/concepts/commandline.md",permalink:"/nuts/docs/concepts/commandline",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/concepts/commandline.md",sidebar_label:"Command Line Arguments",sidebar:"someSidebar",previous:{title:"Install Command",permalink:"/nuts/docs/cmd/install-cmd"},next:{title:"Repository Structure",permalink:"/nuts/docs/concepts/projects"}},p=[{value:"Short vs Long Options",id:"short-vs-long-options",children:[]},{value:"Option Values",id:"option-values",children:[]},{value:"Boolean Options",id:"boolean-options",children:[]},{value:"Combo Simple Options",id:"combo-simple-options",children:[]},{value:"Ignoring Options, Comments",id:"ignoring-options-comments",children:[]},{value:"Nuts Option Types",id:"nuts-option-types",children:[]}],l={rightToc:p};function c(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"     __        __    \n  /\\ \\ \\ _  __/ /______\n /  \\/ / / / / __/ ___/\n/ /\\  / /_/ / /_(__  )\n\\_\\ \\/\\__,_/\\__/____/    version v0.8.1\n")),Object(r.b)("h1",{id:"nuts-commandline"},"Nuts Commandline"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Nuts")," supports a specific format for command line arguments. This format is the format supported in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"nuts"))," Application Framewok (NAF) and as such all NAF applications support the same command line arguments format.\nArguments in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"nuts"))," can be options or non options. Options always start with dash (-). "),Object(r.b)("h2",{id:"short-vs-long-options"},"Short vs Long Options"),Object(r.b)("p",null,'Options can be long options (starts with double dash) or short options (start with a single dash).\nMany arguments support both forms. For instance "-w" and "--workspace" are the spported forms to define the workspace location in the nuts command.'),Object(r.b)("h2",{id:"option-values"},"Option Values"),Object(r.b)("p",null,'Options can also support a value of type string or boolean.  The value can be suffixed to the option while separated with \'=\' sign or immediately after the option. As an example "-w=/myfolder/myworkspace" and  "--workspace /myfolder/myworkspace" are equivalent.'),Object(r.b)("h2",{id:"boolean-options"},"Boolean Options"),Object(r.b)("p",null,'Particularly, when the value is a boolean, the value do not need to be defined. As a result "--skip-companions" and "--skip-companions=true" are equivalent. However "--skip-companions true" is not (because the option is of type boolean) and "true" will be parsed as a NonOption.'),Object(r.b)("p",null,'To define a "false" value to the boolean option we can either suffix with "=false" or prefix with "!" or "~" sign.\nHence, "--skip-companions=false", "--!skip-companions" and "--~skip-companions" are all equivalent.'),Object(r.b)("h2",{id:"combo-simple-options"},"Combo Simple Options"),Object(r.b)("p",null,'Simple options can be grouped in a single word. "-ls" is equivalent to "-l -s". So one should be careful.\nOne exception though. For portability reasons, "-version" is considered a single short option.'),Object(r.b)("h2",{id:"ignoring-options-comments"},"Ignoring Options, Comments"),Object(r.b)("p",null,'Options starting with "-//" and "--//" are simply ignored by the command line parser.'),Object(r.b)("h2",{id:"nuts-option-types"},"Nuts Option Types"),Object(r.b)("p",null,"Options in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"nuts"))," are regrouped in multiple categories. An option can belong to multiple categories though."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Create Options : such options are only relevant when creating a new workspace. They define the configuration of the workspace to create. They will be ignored when the workspace already exists. Examples include"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"--skip-companions"),Object(r.b)("li",{parentName:"ul"},"--archetype"),Object(r.b)("li",{parentName:"ul"},"--store-strategy"),Object(r.b)("li",{parentName:"ul"},"--standalone"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Open Options : such options are relevant when creating a new workspace or when opening an existing workspace. They define the way commands are executed. Examples include"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"--workspace"),Object(r.b)("li",{parentName:"ul"},"--bot"),Object(r.b)("li",{parentName:"ul"},"--reset"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Exported Options : are passed to sub-",Object(r.b)("strong",{parentName:"p"},"nuts"),"-processes that will be created by ",Object(r.b)("strong",{parentName:"p"},"nuts"),". For instance when nuts will call the ",Object(r.b)("strong",{parentName:"p"},"nsh")," command it will spawn a new process. In such case, these options are passed to the sub-process as environment variable."),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"--workspace"),Object(r.b)("li",{parentName:"ul"},"--bot"),Object(r.b)("li",{parentName:"ul"},"--no-color"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Application Options : are options that are by default supported by Applications using NAF (Nuts Application Framework) (as well as Nuts it self)."),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"--help"),Object(r.b)("li",{parentName:"ul"},"--version")))),Object(r.b)("p",null,"all ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"nuts"))," options are described in the command help. Just type :"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"nuts --help\n")))}c.isMDXComponent=!0}}]);