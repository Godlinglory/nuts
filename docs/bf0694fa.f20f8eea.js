(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{116:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return d}));var a=t(0),l=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function b(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?b(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):b(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=l.a.createContext({}),u=function(e){var n=l.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=u(e.components);return l.a.createElement(o.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},m=l.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,b=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,d=p["".concat(b,".").concat(m)]||p[m]||s[m]||r;return t?l.a.createElement(d,c(c({ref:n},o),{},{components:t})):l.a.createElement(d,c({ref:n},o))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,b=new Array(r);b[0]=m;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,b[1]=c;for(var o=2;o<r;o++)b[o]=t[o];return l.a.createElement.apply(null,b)}return l.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},98:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return b})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return i})),t.d(n,"default",(function(){return u}));var a=t(2),l=t(6),r=(t(0),t(116)),b={id:"javadoc_Command_Line",title:"Command Line",sidebar_label:"Command Line"},c={unversionedId:"javadocs/javadoc_Command_Line",id:"javadocs/javadoc_Command_Line",isDocsHomePage:!1,title:"Command Line",description:"\u2615 NutsArgument",source:"@site/docs/javadocs/Command Line.md",permalink:"/nuts/docs/javadocs/javadoc_Command_Line",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/javadocs/Command Line.md",sidebar_label:"Command Line",sidebar:"someSidebar",previous:{title:"Format",permalink:"/nuts/docs/javadocs/javadoc_Format"},next:{title:"Application",permalink:"/nuts/docs/javadocs/javadoc_Application"}},i=[{value:"\u2615 NutsArgument",id:"-nutsargument",children:[{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties",children:[]},{value:"\u2699 Instance Methods",id:"-instance-methods",children:[]}]},{value:"\u2615 NutsArgumentCandidate",id:"-nutsargumentcandidate",children:[{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties-1",children:[]}]},{value:"\u2615 NutsArgumentName",id:"-nutsargumentname",children:[{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties-2",children:[]},{value:"\u2699 Instance Methods",id:"-instance-methods-1",children:[]}]},{value:"\u2615 NutsCommandAutoCompleteBase",id:"-nutscommandautocompletebase",children:[{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties-3",children:[]},{value:"\u2699 Instance Methods",id:"-instance-methods-2",children:[]}]},{value:"\u2615 NutsCommandExecOptions",id:"-nutscommandexecoptions",children:[{value:"\ud83d\udce2\u2744 Constant Fields",id:"-constant-fields",children:[]},{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties-4",children:[]},{value:"\u2699 Instance Methods",id:"-instance-methods-3",children:[]}]},{value:"\u2615 NutsCommandLine",id:"-nutscommandline",children:[{value:"\u2699 Instance Methods",id:"-instance-methods-4",children:[]}]},{value:"\u2615 NutsCommandLineFormat",id:"-nutscommandlineformat",children:[{value:"\ud83c\udf9b Instance Properties",id:"-instance-properties-5",children:[]},{value:"\u2699 Instance Methods",id:"-instance-methods-5",children:[]}]},{value:"\u2615 NutsCommandLineProcessor",id:"-nutscommandlineprocessor",children:[{value:"\u2699 Instance Methods",id:"-instance-methods-6",children:[]}]},{value:"\u2615 NutsConfigurable",id:"-nutsconfigurable",children:[{value:"\u2699 Instance Methods",id:"-instance-methods-7",children:[]}]}],o={rightToc:i};function u(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},o,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"-nutsargument"},"\u2615 NutsArgument"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public  net.vpc.app.nuts.NutsArgument\n")),Object(r.b)("p",null,"Command Line Argument"),Object(r.b)("h3",{id:"-instance-properties"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-argumentkey"},"\ud83d\udcc4\ud83c\udf9b argumentKey"),Object(r.b)("p",null,"return new instance (never null) of the key part of the argument. The key\ndoes not include neither ! nor // or = argument parts as they are parsed\nseparately. Here example of getArgumentKey result of some arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("key").getArgumentKey() ==',">",' Argument("key") ')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("key=value").getArgumentKey() ==',">",' Argument("key") ')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("--key=value").getArgumentKey() ==',">",' Argument("--key")')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("--!key=value").getArgumentKey() ==',">",' Argument("--key")')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("--!//key=value").getArgumentKey() ==',">",' Argument("--key")'))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  NutsArgument argumentKey\n NutsArgument getArgumentKey()\n")),Object(r.b)("h4",{id:"-argumentoptionname"},"\ud83d\udcc4\ud83c\udf9b argumentOptionName"),Object(r.b)("p",null,"return option key part excluding prefix ('-' and '--')"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  NutsArgument argumentOptionName\n NutsArgument getArgumentOptionName()\n")),Object(r.b)("h4",{id:"-argumentvalue"},"\ud83d\udcc4\ud83c\udf9b argumentValue"),Object(r.b)("p",null,"return new instance (never null) of the value part of the argument (after\n=). However Argument's value may be null (\n",Object(r.b)("inlineCode",{parentName:"p"}," getArgumentValue().getString() == null"),"). Here are some examples of\ngetArgumentValue() result for some common arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("key").getArgumentValue() ==',">"," Argument(null) ")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("key=value").getArgumentValue() ==',">",' Argument("value")')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("key=").getArgumentValue() ==',">",' Argument("") ')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("--key=value").getArgumentValue() ==',">",' Argument("value")')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("--!key=value").getArgumentValue() ==',">",' Argument("value")')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("--!//key=value").getArgumentValue() ==',">",'\nArgument("value") '))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  NutsArgument argumentValue\n NutsArgument getArgumentValue()\n")),Object(r.b)("h4",{id:"-boolean"},"\ud83d\udcc4\ud83c\udf9b boolean"),Object(r.b)("p",null,'test if the argument is valid boolean. a valid boolean mush match one of\nthe following regular expressions :\n"true|enable|enabled|yes|always|y|on|ok|t" : will be evaluated as true\nboolean. "false|disable|disabled|no|none|never|n|off|ko" : will be\nevaluated as false boolean. In both cases, this method returns true.\nOtherwise, it will return false.'),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  boolean boolean\n boolean isBoolean()\n")),Object(r.b)("h4",{id:"-booleanvalue"},"\ud83d\udcc4\ud83c\udf9b booleanValue"),Object(r.b)("p",null,"parse argument's value as boolean equivalent to\n",Object(r.b)("inlineCode",{parentName:"p"}," getArgumentValue().getBoolean()")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  boolean booleanValue\n boolean getBooleanValue()\n")),Object(r.b)("h4",{id:"-double"},"\ud83d\udcc4\ud83c\udf9b double"),Object(r.b)("p",null,"parse number and return double."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  double double\n double getDouble()\n")),Object(r.b)("h4",{id:"-enabled"},"\ud83d\udcc4\ud83c\udf9b enabled"),Object(r.b)("p",null,"false if option is in one of the following forms :"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"-//name"),Object(r.b)("li",{parentName:"ul"},"--//name")),Object(r.b)("p",null,"where name is any valid identifier"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  boolean enabled\n boolean isEnabled()\n")),Object(r.b)("h4",{id:"-int"},"\ud83d\udcc4\ud83c\udf9b int"),Object(r.b)("p",null,"parse number and return integer."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  int int\n int getInt()\n")),Object(r.b)("h4",{id:"-keyvalue"},"\ud83d\udcc4\ud83c\udf9b keyValue"),Object(r.b)("p",null,"true if the argument is in the form key=value"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  boolean keyValue\n boolean isKeyValue()\n")),Object(r.b)("h4",{id:"-keyvalueseparator"},"\ud83d\udcc4\ud83c\udf9b keyValueSeparator"),Object(r.b)("p",null,"return query value separator"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  String keyValueSeparator\n String getKeyValueSeparator()\n")),Object(r.b)("h4",{id:"-long"},"\ud83d\udcc4\ud83c\udf9b long"),Object(r.b)("p",null,"parse number and return long."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  long long\n long getLong()\n")),Object(r.b)("h4",{id:"-negated"},"\ud83d\udcc4\ud83c\udf9b negated"),Object(r.b)("p",null,"true if option is in one of the following forms :"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"-!name","[=...]"),Object(r.b)("li",{parentName:"ul"},"--!name","[=...]"),Object(r.b)("li",{parentName:"ul"},"!name","[=...]")),Object(r.b)("p",null,"where name is any valid identifier"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  boolean negated\n boolean isNegated()\n")),Object(r.b)("h4",{id:"-nonoption"},"\ud83d\udcc4\ud83c\udf9b nonOption"),Object(r.b)("p",null,"true if the argument do not start with '-' or '+' or is blank. this is\nequivalent to ",Object(r.b)("inlineCode",{parentName:"p"}," !isOption()"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  boolean nonOption\n boolean isNonOption()\n")),Object(r.b)("h4",{id:"-option"},"\ud83d\udcc4\ud83c\udf9b option"),Object(r.b)("p",null,"true if the argument starts with '-' or '+'"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  boolean option\n boolean isOption()\n")),Object(r.b)("h4",{id:"-string"},"\ud83d\udcc4\ud83c\udf9b string"),Object(r.b)("p",null,"string representation of the argument or null"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  String string\n String getString()\n")),Object(r.b)("h4",{id:"-stringkey"},"\ud83d\udcc4\ud83c\udf9b stringKey"),Object(r.b)("p",null,"return key part (never null) of the argument. The key does not include\nneither ! nor // or = argument parts as they are parsed separately. Here\nare some examples of getStringKey() result for some common arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("key").getArgumentKey() ==',">",' "key" ')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("key=value").getArgumentKey() ==',">",' "key" ')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("--key=value").getArgumentKey() ==',">",' "--key"')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("--!key=value").getArgumentKey() ==',">",' "--key"')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("--!//key=value").getArgumentKey() ==',">",' "--key"')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Argument("--//!key=value").getArgumentKey() ==',">",' "--key"'))),Object(r.b)("p",null,"equivalent to ",Object(r.b)("inlineCode",{parentName:"p"}," getArgumentKey().getString()")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  String stringKey\n String getStringKey()\n")),Object(r.b)("h4",{id:"-stringoptionname"},"\ud83d\udcc4\ud83c\udf9b stringOptionName"),Object(r.b)("p",null,"return option key part excluding prefix ('-' and '--')"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  String stringOptionName\n String getStringOptionName()\n")),Object(r.b)("h4",{id:"-stringoptionprefix"},"\ud83d\udcc4\ud83c\udf9b stringOptionPrefix"),Object(r.b)("p",null,"return option prefix part  ('-' and '--')"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  String stringOptionPrefix\n String getStringOptionPrefix()\n")),Object(r.b)("h4",{id:"-stringvalue"},"\ud83d\udcc4\ud83c\udf9b stringValue"),Object(r.b)("p",null,"equivalent to ",Object(r.b)("inlineCode",{parentName:"p"}," getArgumentValue().getString()")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  String stringValue\n String getStringValue()\n")),Object(r.b)("h3",{id:"-instance-methods"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-getbooleandefaultvalue"},"\u2699 getBoolean(defaultValue)"),Object(r.b)("p",null,"return boolean value if the current argument can be parsed as valid\nboolean of defaultValue if not"),Object(r.b)("p",null,"\"true|enable|enabled|yes|always|y|on|ok|t\" are considered 'true'.\n\"false|disable|disabled|no|none|never|n|off|ko\" are considered 'false'."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Boolean getBoolean(Boolean defaultValue)\n")),Object(r.b)("p",null,"default value"),Object(r.b)("h4",{id:"-getdoubledefaultvalue"},"\u2699 getDouble(defaultValue)"),Object(r.b)("p",null,"parse number and return double or ",Object(r.b)("inlineCode",{parentName:"p"}," defaultValue")," if not parsable."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"double getDouble(double defaultValue)\n")),Object(r.b)("p",null,"defaultValue"),Object(r.b)("h4",{id:"-getintdefaultvalue"},"\u2699 getInt(defaultValue)"),Object(r.b)("p",null,"parse number and return integer or ",Object(r.b)("inlineCode",{parentName:"p"}," defaultValue")," if not parsable."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int getInt(int defaultValue)\n")),Object(r.b)("p",null,"defaultValue"),Object(r.b)("h4",{id:"-getlongdefaultvalue"},"\u2699 getLong(defaultValue)"),Object(r.b)("p",null,"parse number and return long or ",Object(r.b)("inlineCode",{parentName:"p"}," defaultValue")," if not parsable."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"long getLong(long defaultValue)\n")),Object(r.b)("p",null,"defaultValue"),Object(r.b)("h4",{id:"-getstringdefaultvalue"},"\u2699 getString(defaultValue)"),Object(r.b)("p",null,"string representation of the argument or the given defaultValue"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"String getString(String defaultValue)\n")),Object(r.b)("p",null,"returned when this argument references null value"),Object(r.b)("h4",{id:"-getstringvaluedefaultvalue"},"\u2699 getStringValue(defaultValue)"),Object(r.b)("p",null,"equivalent to ",Object(r.b)("inlineCode",{parentName:"p"}," getArgumentValue().getString(value)")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"String getStringValue(String defaultValue)\n")),Object(r.b)("p",null,"default value"),Object(r.b)("h4",{id:"-required"},"\u2699 required()"),Object(r.b)("p",null,"Throw an exception if the argument is null"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument required()\n")),Object(r.b)("h2",{id:"-nutsargumentcandidate"},"\u2615 NutsArgumentCandidate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public  net.vpc.app.nuts.NutsArgumentCandidate\n")),Object(r.b)("p",null,"Argument Candidate used in Auto Complete."),Object(r.b)("p",null,"Created by vpc on 3/7/17."),Object(r.b)("h3",{id:"-instance-properties-1"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-display"},"\ud83d\udcc4\ud83c\udf9b display"),Object(r.b)("p",null,"human display"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  String display\n String getDisplay()\n")),Object(r.b)("h4",{id:"-value"},"\ud83d\udcc4\ud83c\udf9b value"),Object(r.b)("p",null,"argument value"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  String value\n String getValue()\n")),Object(r.b)("h2",{id:"-nutsargumentname"},"\u2615 NutsArgumentName"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public  net.vpc.app.nuts.NutsArgumentName\n")),Object(r.b)("p",null,"Non Option Argument specification"),Object(r.b)("h3",{id:"-instance-properties-2"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-name"},"\ud83d\udcc4\ud83c\udf9b name"),Object(r.b)("p",null,"argument name"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  String name\n String getName()\n")),Object(r.b)("h3",{id:"-instance-methods-1"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-getcandidatescontext"},"\u2699 getCandidates(context)"),Object(r.b)("p",null,"argument candidate values"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"List\\<NutsArgumentCandidate\\> getCandidates(NutsCommandAutoComplete context)\n")),Object(r.b)("p",null,"autocomplete"),Object(r.b)("h2",{id:"-nutscommandautocompletebase"},"\u2615 NutsCommandAutoCompleteBase"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public  abstract  net.vpc.app.nuts.NutsCommandAutoCompleteBase\n")),Object(r.b)("p",null,"Base (Abstract) implementation of NutsCommandAutoComplete"),Object(r.b)("h3",{id:"-instance-properties-3"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-candidates"},"\ud83d\udcc4\ud83c\udf9b candidates"),Object(r.b)("p",null,"candidates map"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] public  LinkedHashMap\\<String,NutsArgumentCandidate\\> candidates\nprivate  final  LinkedHashMap\\<String,NutsArgumentCandidate\\> candidates = new LinkedHashMap<>()\npublic  List\\<NutsArgumentCandidate\\> getCandidates()\n")),Object(r.b)("h4",{id:"-workspace"},"\ud83d\udcc4\ud83c\udf9b workspace"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only] public  NutsWorkspace workspace\npublic  NutsWorkspace getWorkspace()\n")),Object(r.b)("h3",{id:"-instance-methods-2"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-addcandidatevalue"},"\u2699 addCandidate(value)"),Object(r.b)("p",null,"add candidate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"void addCandidate(NutsArgumentCandidate value)\n")),Object(r.b)("p",null,"candidate"),Object(r.b)("h4",{id:"-addcandidatesimplvalue"},"\u2699 addCandidatesImpl(value)"),Object(r.b)("p",null,"simple add candidates implementation"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgumentCandidate addCandidatesImpl(NutsArgumentCandidate value)\n")),Object(r.b)("p",null,"candidate"),Object(r.b)("h4",{id:"-gett"},"\u2699 get(t)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"T get(Class\\<T\\> t)\n")),Object(r.b)("p",null,"null"),Object(r.b)("h2",{id:"-nutscommandexecoptions"},"\u2615 NutsCommandExecOptions"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public  net.vpc.app.nuts.NutsCommandExecOptions\n")),Object(r.b)("p",null,"Command execution options"),Object(r.b)("h3",{id:"-constant-fields"},"\ud83d\udce2\u2744 Constant Fields"),Object(r.b)("h4",{id:"-serialversionuid"},"\ud83d\udce2\u2744 serialVersionUID"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"private  static  final  long serialVersionUID = 1\n")),Object(r.b)("h3",{id:"-instance-properties-4"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-directory"},"\ud83d\udcdd\ud83c\udf9b directory"),Object(r.b)("p",null,"execution directory"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] String public  directory\nprivate  String directory\npublic  String getDirectory()\npublic  NutsCommandExecOptions setDirectory(directory)\n")),Object(r.b)("h4",{id:"-env"},"\ud83d\udcdd\ud83c\udf9b env"),Object(r.b)("p",null,"execution environment variables"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] Map\\<String,String\\> public  env\nprivate  Map\\<String,String\\> env\npublic  Map\\<String,String\\> getEnv()\npublic  NutsCommandExecOptions setEnv(env)\n")),Object(r.b)("h4",{id:"-executiontype"},"\ud83d\udcdd\ud83c\udf9b executionType"),Object(r.b)("p",null,"execution type"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsExecutionType public  executionType\nprivate  NutsExecutionType executionType\npublic  NutsExecutionType getExecutionType()\npublic  NutsCommandExecOptions setExecutionType(executionType)\n")),Object(r.b)("h4",{id:"-executoroptions"},"\ud83d\udcdd\ud83c\udf9b executorOptions"),Object(r.b)("p",null,"execution options"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] String[] public  executorOptions\nprivate  String[] executorOptions\npublic  String[] getExecutorOptions()\npublic  NutsCommandExecOptions setExecutorOptions(executorOptions)\n")),Object(r.b)("h4",{id:"-failfast"},"\ud83d\udcdd\ud83c\udf9b failFast"),Object(r.b)("p",null,"when fail fast,non zero exit value will raise NutsExecutionException"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] boolean public  failFast\nprivate  boolean failFast\npublic  boolean isFailFast()\npublic  NutsCommandExecOptions setFailFast(failFast)\n")),Object(r.b)("h3",{id:"-instance-methods-3"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-equalso"},"\u2699 equals(o)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean equals(Object o)\n")),Object(r.b)("p",null,"null"),Object(r.b)("h4",{id:"-hashcode"},"\u2699 hashCode()"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int hashCode()\n")),Object(r.b)("h4",{id:"-tostring"},"\u2699 toString()"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"String toString()\n")),Object(r.b)("h2",{id:"-nutscommandline"},"\u2615 NutsCommandLine"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public  net.vpc.app.nuts.NutsCommandLine\n")),Object(r.b)("p",null,"Simple Command line parser implementation. The command line supports\narguments in the following forms :"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"non option arguments : any argument that does not start with '-'"),Object(r.b)("li",{parentName:"ul"},"long option arguments : any argument that starts with a single '--' in the\nform of")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"--[//][!]?[^=]*[=.*]\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"// means disabling the option"),Object(r.b)("li",{parentName:"ul"},"! means switching (to 'false') the option's value"),Object(r.b)("li",{parentName:"ul"},"the string before the '=' is the option's key"),Object(r.b)("li",{parentName:"ul"},"the string after the '=' is the option's value")),Object(r.b)("p",null,"Examples :"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"--!enable : option 'enable' with 'false' value"),Object(r.b)("li",{parentName:"ul"},"--enable=yes : option 'enable' with 'yes' value"),Object(r.b)("li",{parentName:"ul"},"--!enable=yes : invalid option (no error will be thrown but the result is\nundefined)")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"simple option arguments : any argument that starts with a single '-' in the\nform of")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"-[//][!]?[a-z][=.*]\n``` This is actually very similar to long options\n\n- -!enable (with expandSimpleOptions=false) : option 'enable' with 'false'\nvalue\n- --enable=yes : option 'enable' with 'yes' value\n- --!enable=yes : invalid option (no error will be thrown but the result is\nundefined)\n\n\n\n- \ncondensed simple option arguments : any argument that starts with a single\n'-' in the form of\n")),Object(r.b)("p",null,"-",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"%5B!%5D?%5Ba-z%5D"}),"//"),"+","[=.*]"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-This",metastring:"is actually very similar to long",is:!0,actually:!0,very:!0,similar:!0,to:!0,long:!0}),"options and is parsable when expandSimpleOptions=true. When activating\nexpandSimpleOptions, multi characters key will be expanded as multiple\nseparate simple options Examples :\n\n- -!enable (with expandSimpleOptions=false) : option 'enable' with 'false'\nvalue\n- --enable=yes : option 'enable' with 'yes' value\n- --!enable=yes : invalid option (no error will be thrown but the result is\nundefined)\n\n\n\n- long option arguments : any argument that starts with a '--' \n\noption may start with '!' to switch armed flags expandSimpleOptions : when\nactivated\n### \ud83c\udf9b Instance Properties\n#### \u270f\ud83c\udf9b arguments\nreset this instance with the given arguments\n```java\n[write-only] NutsCommandLine  arguments\n NutsCommandLine setArguments(arguments)\n")),Object(r.b)("h4",{id:"-autocomplete"},"\ud83d\udcdd\ud83c\udf9b autoComplete"),Object(r.b)("p",null,"set autocomplete instance"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsCommandLine  autoComplete\n NutsCommandAutoComplete getAutoComplete()\n NutsCommandLine setAutoComplete(autoComplete)\n")),Object(r.b)("h4",{id:"-autocompletemode"},"\ud83d\udcc4\ud83c\udf9b autoCompleteMode"),Object(r.b)("p",null,"true if auto complete instance is registered (is not null)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  boolean autoCompleteMode\n boolean isAutoCompleteMode()\n")),Object(r.b)("h4",{id:"-commandname"},"\ud83d\udcdd\ud83c\udf9b commandName"),Object(r.b)("p",null,"set command name that will be used as an extra info in thrown exceptions"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsCommandLine  commandName\n String getCommandName()\n NutsCommandLine setCommandName(commandName)\n")),Object(r.b)("h4",{id:"-empty"},"\ud83d\udcc4\ud83c\udf9b empty"),Object(r.b)("p",null,"true if no more arguments are available"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  boolean empty\n boolean isEmpty()\n")),Object(r.b)("h4",{id:"-execmode"},"\ud83d\udcc4\ud83c\udf9b execMode"),Object(r.b)("p",null,"true if auto complete instance is not registered (is null)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  boolean execMode\n boolean isExecMode()\n")),Object(r.b)("h4",{id:"-expandsimpleoptions"},"\ud83d\udcdd\ud83c\udf9b expandSimpleOptions"),Object(r.b)("p",null,"enable or disable simple option expansion"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsCommandLine  expandSimpleOptions\n boolean isExpandSimpleOptions()\n NutsCommandLine setExpandSimpleOptions(expand)\n")),Object(r.b)("h4",{id:"-specialsimpleoptions"},"\ud83d\udcc4\ud83c\udf9b specialSimpleOptions"),Object(r.b)("p",null,"list of registered simple options"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  String[] specialSimpleOptions\n String[] getSpecialSimpleOptions()\n")),Object(r.b)("h4",{id:"-wordindex"},"\ud83d\udcc4\ud83c\udf9b wordIndex"),Object(r.b)("p",null,"current word index"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-only]  int wordIndex\n int getWordIndex()\n")),Object(r.b)("h3",{id:"-instance-methods-4"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-acceptvalues"},"\u2699 accept(values)"),Object(r.b)("p",null,"true if arguments start with the given suite."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean accept(String values)\n")),Object(r.b)("p",null,"arguments suite"),Object(r.b)("h4",{id:"-acceptindex-values"},"\u2699 accept(index, values)"),Object(r.b)("p",null,"true if arguments start at index ",Object(r.b)("inlineCode",{parentName:"p"}," index")," with the given suite."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean accept(int index, String values)\n")),Object(r.b)("p",null,"starting index\narguments suite"),Object(r.b)("h4",{id:"-containsname"},"\u2699 contains(name)"),Object(r.b)("p",null,"return true if any argument is equal to the given name"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean contains(String name)\n")),Object(r.b)("p",null,"argument name"),Object(r.b)("h4",{id:"-findname"},"\u2699 find(name)"),Object(r.b)("p",null,"find first argument with argument key name"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument find(String name)\n")),Object(r.b)("p",null,"argument key name"),Object(r.b)("h4",{id:"-getindex"},"\u2699 get(index)"),Object(r.b)("p",null,"return argument at given index"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument get(int index)\n")),Object(r.b)("p",null,"argument index"),Object(r.b)("h4",{id:"-hasnext"},"\u2699 hasNext()"),Object(r.b)("p",null,"true if there still at least one argument to consume"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean hasNext()\n")),Object(r.b)("h4",{id:"-indexofname"},"\u2699 indexOf(name)"),Object(r.b)("p",null,"first argument index (or -1 if not found) with value ",Object(r.b)("inlineCode",{parentName:"p"}," name")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int indexOf(String name)\n")),Object(r.b)("p",null,"argument key name"),Object(r.b)("h4",{id:"-isnonoptionindex"},"\u2699 isNonOption(index)"),Object(r.b)("p",null,"true if the argument and index exists and is non option"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean isNonOption(int index)\n")),Object(r.b)("p",null,"index"),Object(r.b)("h4",{id:"-isoptionindex"},"\u2699 isOption(index)"),Object(r.b)("p",null,"true if the argument and index exists and is option"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean isOption(int index)\n")),Object(r.b)("p",null,"index"),Object(r.b)("h4",{id:"-isspecialsimpleoptionoption"},"\u2699 isSpecialSimpleOption(option)"),Object(r.b)("p",null,"test if the option is a registered simple option This method helps\nconsidering '-version' as a single simple options when\n",Object(r.b)("inlineCode",{parentName:"p"}," isExpandSimpleOptions()==true")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean isSpecialSimpleOption(String option)\n")),Object(r.b)("p",null,"option"),Object(r.b)("h4",{id:"-length"},"\u2699 length()"),Object(r.b)("p",null,"number of arguments available to retrieve"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int length()\n")),Object(r.b)("h4",{id:"-next"},"\u2699 next()"),Object(r.b)("p",null,"consume (remove) the first argument and return it return null if not\nargument is left"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument next()\n")),Object(r.b)("h4",{id:"-nextname"},"\u2699 next(name)"),Object(r.b)("p",null,"consume (remove) the first argument and return it while adding a hint to\nAuto Complete about expected argument candidates return null if not\nargument is left"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument next(NutsArgumentName name)\n")),Object(r.b)("p",null,"expected argument name"),Object(r.b)("h4",{id:"-nextnames"},"\u2699 next(names)"),Object(r.b)("p",null,"next argument with any value type (may having not a value). equivalent to\n",Object(r.b)("inlineCode",{parentName:"p"}," next(NutsArgumentType.ANY,names)")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument next(String names)\n")),Object(r.b)("p",null,"names"),Object(r.b)("h4",{id:"-nextexpectvalue-names"},"\u2699 next(expectValue, names)"),Object(r.b)("p",null,"next argument with any value type (may having not a value)."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument next(NutsArgumentType expectValue, String names)\n")),Object(r.b)("p",null,"expected value type\nnames"),Object(r.b)("h4",{id:"-nextbooleannames"},"\u2699 nextBoolean(names)"),Object(r.b)("p",null,"next argument with boolean value equivalent to\nnext(NutsArgumentType.STRING,names)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument nextBoolean(String names)\n")),Object(r.b)("p",null,"names"),Object(r.b)("h4",{id:"-nextnonoption"},"\u2699 nextNonOption()"),Object(r.b)("p",null,"next argument if it exists and it is a non option. Return null in all\nother cases."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument nextNonOption()\n")),Object(r.b)("h4",{id:"-nextnonoptionname"},"\u2699 nextNonOption(name)"),Object(r.b)("p",null,"next argument if it exists and it is a non option. Return null in all\nother cases."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument nextNonOption(NutsArgumentName name)\n")),Object(r.b)("p",null,"argument specification (may be null)"),Object(r.b)("h4",{id:"-nextrequirednonoptionname"},"\u2699 nextRequiredNonOption(name)"),Object(r.b)("p",null,"next argument if it exists and it is a non option. Throw an error in all\nother cases."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument nextRequiredNonOption(NutsArgumentName name)\n")),Object(r.b)("p",null,"argument specification (may be null)"),Object(r.b)("h4",{id:"-nextstringnames"},"\u2699 nextString(names)"),Object(r.b)("p",null,"next argument with string value. equivalent to\nnext(NutsArgumentType.STRING,names)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument nextString(String names)\n")),Object(r.b)("p",null,"names"),Object(r.b)("h4",{id:"-parselinecommandline"},"\u2699 parseLine(commandLine)"),Object(r.b)("p",null,"reset this instance with the given parsed arguments"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine parseLine(String commandLine)\n")),Object(r.b)("p",null,"to parse"),Object(r.b)("h4",{id:"-peek"},"\u2699 peek()"),Object(r.b)("p",null,"the first argument to consume without removing/consuming it or null if\nnot argument is left"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument peek()\n")),Object(r.b)("h4",{id:"-processdefaultconfigurable-processor"},"\u2699 process(defaultConfigurable, processor)"),Object(r.b)("p",null,"run the processor and fall back to defaultConfigurable"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"void process(NutsConfigurable defaultConfigurable, NutsCommandLineProcessor processor)\n")),Object(r.b)("p",null,"default configurable\nprocessor"),Object(r.b)("h4",{id:"-pushbackarg"},"\u2699 pushBack(arg)"),Object(r.b)("p",null,"push back argument so that it will be first to be retrieved (using next\nmethods)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine pushBack(NutsArgument arg)\n")),Object(r.b)("p",null,"argument"),Object(r.b)("h4",{id:"-registerspecialsimpleoptionoption"},"\u2699 registerSpecialSimpleOption(option)"),Object(r.b)("p",null,"register ",Object(r.b)("inlineCode",{parentName:"p"}," options")," as simple (with simple '-') option. This method\nhelps considering '-version' as a single simple options when\n",Object(r.b)("inlineCode",{parentName:"p"}," isExpandSimpleOptions()==true")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine registerSpecialSimpleOption(String option)\n")),Object(r.b)("p",null,"option"),Object(r.b)("h4",{id:"-requirenonoption"},"\u2699 requireNonOption()"),Object(r.b)("p",null,"throw exception if command line is empty or the first word is an option"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine requireNonOption()\n")),Object(r.b)("h4",{id:"-required-1"},"\u2699 required()"),Object(r.b)("p",null,"throw exception if command line is empty"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine required()\n")),Object(r.b)("h4",{id:"-requirederrormessage"},"\u2699 required(errorMessage)"),Object(r.b)("p",null,"throw exception if command line is empty"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine required(String errorMessage)\n")),Object(r.b)("p",null,"message to throw"),Object(r.b)("h4",{id:"-skip"},"\u2699 skip()"),Object(r.b)("p",null,"skip next argument"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int skip()\n")),Object(r.b)("h4",{id:"-skipcount"},"\u2699 skip(count)"),Object(r.b)("p",null,"consume ",Object(r.b)("inlineCode",{parentName:"p"}," count")," words and return how much it was able to consume"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int skip(int count)\n")),Object(r.b)("p",null,"count"),Object(r.b)("h4",{id:"-skipall"},"\u2699 skipAll()"),Object(r.b)("p",null,"consume all words and return consumed count"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"int skipAll()\n")),Object(r.b)("h4",{id:"-toarray"},"\u2699 toArray()"),Object(r.b)("p",null,"returns un-parsed (or partially parsed) available arguments"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"String[] toArray()\n")),Object(r.b)("h4",{id:"-unexpectedargument"},"\u2699 unexpectedArgument()"),Object(r.b)("p",null,"throw exception if command line is not empty"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine unexpectedArgument()\n")),Object(r.b)("h4",{id:"-unexpectedargumenterrormessage"},"\u2699 unexpectedArgument(errorMessage)"),Object(r.b)("p",null,"throw exception if command line is not empty"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine unexpectedArgument(String errorMessage)\n")),Object(r.b)("p",null,"message to throw"),Object(r.b)("h4",{id:"-unregisterspecialsimpleoptionoption"},"\u2699 unregisterSpecialSimpleOption(option)"),Object(r.b)("p",null,"unregister ",Object(r.b)("inlineCode",{parentName:"p"}," options")," as simple (with simple '-') option. This\nmethod helps considering '-version' as a single simple options when\n",Object(r.b)("inlineCode",{parentName:"p"}," isExpandSimpleOptions()==true")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine unregisterSpecialSimpleOption(String option)\n")),Object(r.b)("p",null,"option"),Object(r.b)("h2",{id:"-nutscommandlineformat"},"\u2615 NutsCommandLineFormat"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public  net.vpc.app.nuts.NutsCommandLineFormat\n")),Object(r.b)("p",null,"Simple Command line Format"),Object(r.b)("h3",{id:"-instance-properties-5"},"\ud83c\udf9b Instance Properties"),Object(r.b)("h4",{id:"-session"},"\u270f\ud83c\udf9b session"),Object(r.b)("p",null,"update session"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[write-only] NutsCommandLineFormat  session\n NutsCommandLineFormat setSession(session)\n")),Object(r.b)("h4",{id:"-value-1"},"\ud83d\udcdd\ud83c\udf9b value"),Object(r.b)("p",null,"set command line from parsed string"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"[read-write] NutsCommandLineFormat  value\n NutsCommandLine getValue()\n NutsCommandLineFormat setValue(args)\n")),Object(r.b)("h3",{id:"-instance-methods-5"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-configureskipunsupported-args"},"\u2699 configure(skipUnsupported, args)"),Object(r.b)("p",null,"configure the current command with the given arguments. This is an\noverride of the ",Object(r.b)("inlineCode",{parentName:"p"},"NutsConfigurable#configure(boolean, java.lang.String...)"),"\nto help return a more specific return type;"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLineFormat configure(boolean skipUnsupported, String args)\n")),Object(r.b)("p",null,"when true, all unsupported options are skipped\nargument to configure with"),Object(r.b)("h4",{id:"-createargs"},"\u2699 create(args)"),Object(r.b)("p",null,"return new Command line instance"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine create(String args)\n")),Object(r.b)("p",null,"command line args"),Object(r.b)("h4",{id:"-createargs-1"},"\u2699 create(args)"),Object(r.b)("p",null,"return new Command line instance"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine create(List\\<String\\> args)\n")),Object(r.b)("p",null,"command line args"),Object(r.b)("h4",{id:"-createargumentargument"},"\u2699 createArgument(argument)"),Object(r.b)("p",null,"create new argument"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgument createArgument(String argument)\n")),Object(r.b)("p",null,"new argument"),Object(r.b)("h4",{id:"-createcandidatevalue"},"\u2699 createCandidate(value)"),Object(r.b)("p",null,"create argument candidate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgumentCandidate createCandidate(String value)\n")),Object(r.b)("p",null,"candidate value"),Object(r.b)("h4",{id:"-createcandidatevalue-label"},"\u2699 createCandidate(value, label)"),Object(r.b)("p",null,"create argument candidate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgumentCandidate createCandidate(String value, String label)\n")),Object(r.b)("p",null,"candidate value\ncandidate label"),Object(r.b)("h4",{id:"-createnametype"},"\u2699 createName(type)"),Object(r.b)("p",null,"create argument name"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgumentName createName(String type)\n")),Object(r.b)("p",null,"create argument type"),Object(r.b)("h4",{id:"-createnametype-label"},"\u2699 createName(type, label)"),Object(r.b)("p",null,"create argument name"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsArgumentName createName(String type, String label)\n")),Object(r.b)("p",null,"argument type\nargument label"),Object(r.b)("h4",{id:"-parseline"},"\u2699 parse(line)"),Object(r.b)("p",null,"return new Command line instance"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"NutsCommandLine parse(String line)\n")),Object(r.b)("p",null,"command line to parse"),Object(r.b)("h2",{id:"-nutscommandlineprocessor"},"\u2615 NutsCommandLineProcessor"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public  net.vpc.app.nuts.NutsCommandLineProcessor\n")),Object(r.b)("p",null,"The processor is called to process the command line arguments."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"}," init"),": called initially"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"}," processOption"),"|",Object(r.b)("inlineCode",{parentName:"li"}," processNonOption"),": called multiple times until the command line is consumed"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"}," prepare"),": called when the command line is fully consumed"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"}," exec"),"|",Object(r.b)("inlineCode",{parentName:"li"}," autoComplete"),": called to process execution of autcomplete")),Object(r.b)("h3",{id:"-instance-methods-6"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-autocompleteautocomplete"},"\u2699 autoComplete(autoComplete)"),Object(r.b)("p",null,"called when auto-complete (",Object(r.b)("inlineCode",{parentName:"p"}," autoComplete")," is not null)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"void autoComplete(NutsCommandAutoComplete autoComplete)\n")),Object(r.b)("p",null,"autoComplete instance"),Object(r.b)("h4",{id:"-exec"},"\u2699 exec()"),Object(r.b)("p",null,"execute options, called after all options was processed and\ncmdLine.isExecMode() return true."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"void exec()\n")),Object(r.b)("h4",{id:"-initcommandline"},"\u2699 init(commandline)"),Object(r.b)("p",null,"initialize the processor"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"void init(NutsCommandLine commandline)\n")),Object(r.b)("p",null,"associated commandline"),Object(r.b)("h4",{id:"-nextnonoptionnonoption-cmdline"},"\u2699 nextNonOption(nonOption, cmdLine)"),Object(r.b)("p",null,"process the given non option argument that was peeked from the command line.\nImplementations ",Object(r.b)("strong",{parentName:"p"},"MUST"),' call one of\nthe "next" methods to'),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean nextNonOption(NutsArgument nonOption, NutsCommandLine cmdLine)\n")),Object(r.b)("p",null,"peeked argument\nassociated commandline"),Object(r.b)("h4",{id:"-nextoptionoption-cmdline"},"\u2699 nextOption(option, cmdLine)"),Object(r.b)("p",null,"process the given option argument that was peeked from the command line.\nImplementations ",Object(r.b)("strong",{parentName:"p"},"MUST"),' call one of\nthe "next" methods to'),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean nextOption(NutsArgument option, NutsCommandLine cmdLine)\n")),Object(r.b)("p",null,"peeked argument\nassociated commandline"),Object(r.b)("h4",{id:"-preparecommandline"},"\u2699 prepare(commandline)"),Object(r.b)("p",null,"prepare for execution of for auto-complete"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"void prepare(NutsCommandLine commandline)\n")),Object(r.b)("p",null,"associated commandline"),Object(r.b)("h2",{id:"-nutsconfigurable"},"\u2615 NutsConfigurable"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public  net.vpc.app.nuts.NutsConfigurable\n")),Object(r.b)("p",null,"Configurable interface define a extensible way to configure nuts commands\nand objects using simple argument line options."),Object(r.b)("h3",{id:"-instance-methods-7"},"\u2699 Instance Methods"),Object(r.b)("h4",{id:"-configureskipunsupported-args-1"},"\u2699 configure(skipUnsupported, args)"),Object(r.b)("p",null,"configure the current command with the given arguments."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"Object configure(boolean skipUnsupported, String args)\n")),Object(r.b)("p",null,"when true, all unsupported options are skipped\nsilently\narguments to configure with"),Object(r.b)("h4",{id:"-configureskipunsupported-commandline"},"\u2699 configure(skipUnsupported, commandLine)"),Object(r.b)("p",null,"configure the current command with the given arguments."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean configure(boolean skipUnsupported, NutsCommandLine commandLine)\n")),Object(r.b)("p",null,"when true, all unsupported options are skipped\nsilently\narguments to configure with"),Object(r.b)("h4",{id:"-configurefirstcommandline"},"\u2699 configureFirst(commandLine)"),Object(r.b)("p",null,"ask ",Object(r.b)("inlineCode",{parentName:"p"}," this")," instance to configure with the very first argument of\n",Object(r.b)("inlineCode",{parentName:"p"}," commandLine"),". If the first argument is not supported, return\n",Object(r.b)("inlineCode",{parentName:"p"}," false")," and consume (skip/read) the argument. If the argument\nrequired one or more parameters, these arguments are also consumed and\nfinally return ",Object(r.b)("inlineCode",{parentName:"p"}," true")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"boolean configureFirst(NutsCommandLine commandLine)\n")),Object(r.b)("p",null,"arguments to configure with"))}u.isMDXComponent=!0}}]);