##``    _   __      __        
   / | / /_  __/ /______    
  /  |/ / / / / __/ ___/   
 / /|  / /_/ / /_(__  )    
/_/ |_/\\__,_/\\__/____/  `` version ${nuts.workspace-runtime.version}##


**nuts** stands for **Network Updatable Things Services** tool. It is a simple tool  for **managing** remote,
packages, **installing** these  packages to the current machine and **executing** such  packages on need.
Each managed package  is also called a **nuts** which  is a **Network Updatable Thing Service** .
**nuts** packages are  stored  into repositories. A  **repository**  may be local for  storing local **nuts**
or remote for accessing  remote packages (good examples  are  remote maven  repositories). It may
also be a proxy **repository** so that remote packages are fetched and cached locally to save network
resources.
One manages a set of repositories called a  **workspace**. Managed **nuts**  (packages)  have descriptors
that depicts dependencies between them. This dependency is seamlessly handled by  **nuts**  (tool) to
resolve and download on-need dependencies over the wire.

**nuts** is a swiss army knife tool as it acts like (and supports) maven **build tool** to have an abstract
view of the the  packages dependency, like  zypper/apt-get  **package manager tools**  to  install and
uninstall packages allowing multiple versions of the very same package to  be installed, and like
git/svn **source version tools** to support package (re)-building and deploying.

@@COMMON VERBS:@@
deploy,undeploy   : to handle packages (package installers) on the local repositories
install,uninstall : to install/uninstall a package (using its fetched/deployed installer)
checkout,commit   : create new versions of the packages
fetch,push        : download, upload to remote repositories
find              : searches for existing/installable packages

@@SYNOPSYS:@@
nuts \[Nuts Options\] {{\<command\>}} {{\<args\>}} ...

@@VERSIONS:@@
Boot    Version: ${nuts.workspace-boot.version}
Runtime Version: ${nuts.workspace-runtime.version}
Java    Version: ${java.version} (${java.vm.name})

@@USAGE:@@
nuts \[Nuts Options\] \[Nuts Command\]

@@Nuts Options:@@
 [[--workspace-root]] {{\<workspace-root-location\>}}
      root location containing all workspaces.
      This defaults to ~/.nuts where ~ refers to the users\'s home directory.
 [[--workspace]] {{\<workspace-location\>}}
      workspace location to open.
      This defaults to default-workspace. Typically this refers to ~/.nuts/default-workspace
      (when --workspace-root is not specified). workspace location contains both config and component data (from
      repositories).
 [[--archetype]] {{\<archetype-name\>}}
      workspace archetype to create (if workspace not found).
      When opening a non existing workspace, nuts will create it
      using the default archetype. Supported archetypes are :
          default : should handle most cases. Will create 4 repositories
                    nuts local       : containing local nuts java and non java nuts
                    maven-local      : containing a reference to ~/.m2/repository local maven repository
                    maven-central    : referencing http://repo.maven.apache.org/maven2/ (with cache support)
                    maven-vpc-public : referencing https://.../vpc-public-maven/master author\'s github maven repo (with
                                       cache support)
          minimal : will create an almost empty workspace with a single nuts local repository
          server  : will create an almost empty workspace with a couple of users guest (read support) and contributor
                    (write support)
 [[--login]]     {{\<login\>}}
      workspace login
      if not specified, all access to nuts will be with anonymous credentials. so to promote user privileges, one may
      specify user credentials (see --password)
 [[--password]]  {{\<password\>}}
      workspace password
      if not specified, all access to nuts will be with anonymous credentials. so to promote user privileges, one may
      specify user credentials (see --login)
 [[--save]]
      saves workspace if newly created
 [[--version]]
      show version
 [[--which]]
      show which versions, libraries and locations are used for booting **nuts**
 [[--perf]]
      show startup time in ms
 [[--help]]
      show this help and exit
 [[--update]]
      check if a newer version of **nuts** is available in the current workspace and perform update
 [[--check-updates]]
      check if a newer version of **nuts** is available in the current workspace without performing updates
 [[--verbose]] | [[--log-info]] | [[--log-fine]] | [[--log-finer]] | [[--log-severe]] | [[--log-warning]]
      apply trace level

@@Nuts Command:@@
 commands are workspace specific, type ##help## (without '--') command for help

@@Examples:@@
       nuts --help
            shows this help witch is the help to the nuts bootstrapper (not workspace aware)
       nuts help
            shows this help and lists available commands in the current workspace (actually help is a command)
       nuts --update --workspace /home/me/some-folder --archetype minimal --save
            updates **nuts** to the very latest version and restart using workspace location
            /home/me/some-folder location. A minimal ('minimal' archetype) workspace will be created
            and saved. The workspace handles local packages only (as 'minimal' archetype)