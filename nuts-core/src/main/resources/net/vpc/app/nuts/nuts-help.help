==``    _   __      __       ``==
==``   / | / /_  __/ /______ ``==  ==N==etwork ==U==pdatable ==T==hings ==S==ervices
==``  /  |/ / / / / __/ ___/ ``==  <<The Open Source Package Manager for __Java__ (TM)>>
==`` / /|  / /_/ / /_(__  )  ``==  <<and other __Things__>> ... by ==vpc==
==``/_/ |_/\\__,_/\\__/____/ ``==    __http://github.com/thevpc/nuts__
    version [[${nuts.workspace-runtime.version}]]

==nuts== stands for ==Network Updatable Things Services== tool. It is a ==__Package Manager__== for (mainly) java
and non Java world. It helps discovering, downloading, assembling and executing  remote components (packages) in
a very handy way.
Each managed component  is also called a ==nuts== which  is a **Network Updatable Thing Service** .
==nuts== components are  stored  into repositories. A  __repository__  may be local for  storing local ==nuts==
or remote for accessing  remote components (good examples  are  remote maven  repositories). It may
also be a proxy __repository__ so that remote components are fetched and cached locally to save network
resources.
One manages a set of repositories called a  __workspace__. Managed ==nuts==  (components)  have descriptors
that depicts dependencies between them. This dependency is seamlessly handled by  ==nuts==  (tool) to
resolve and download on-need dependencies over the wire.

==nuts== is a swiss army knife tool as it acts like (and supports) maven __build tool__ to have an abstract
view of the the  components __dependency__ and like  {{zypper}}/{{apt-get}}/{{pip}}/{{npm}}  __package manager tools__
to __install__ and __uninstall__ components allowing multiple versions of the very same components to  be installed.

Although ==nuts== focuses on java components, it still supports, by design, native and all non java components.
Dependencies are fetched according to the current operating system type, distribution and hardware
architectures.

==nuts== works either as __standalone application__ or as __java library__ to enable dynamic and dependency
aware class loading and brings a rich toolset to provide a versatile portable command line tools such
as {{nsh}} (a {{bash}} like shell), {{tomcat}}, {{derby}} ... wrapper tools to make it easier providing
__development__ , __test__ and __deployment__ reproducible environments.

With container concepts in mind, ==nuts== is the perfect java application tool for {{Docker}}, {{CoreOs}}
and other __container managers__.

@@COMMON VERBS:@@
deploy, undeploy  : to handle components (component installers) on the local repositories
install,uninstall : to install/uninstall a component (using its fetched/deployed installer)
fetch,push        : download, upload to remote repositories
find              : searches for existing/installable components

@@SYNOPSIS:@@
==nuts== \[Nuts Options\]... {{\<command\>}} {{\<args\>}} ...

@@VERSIONS:@@
Boot API     Version: ${nuts.workspace-boot.version}
Boot Runtime Version: ${nuts.workspace-runtime.version}
Java         Version: ${java.version} (${java.vm.name})

@@NUTS OPTIONS:@@
 There are three (3) types of options : 
 * [[create   options]]
 * [[create exported options]]
 * [[open options]]
 * [[open exported options]]

 [[create exported options]] are considered both when creating a new workspace and when running it. If they are specified in creation 
                    they will be persisted. If they are specified later they will override persisted values without persisting the changes

 [[create options]] are considered solely when creating a new workspace. They will be persisted then (to the configuration file)
                    but They will be ignored elsewhere if the workspace already exists : configured parameters will be in use.

 [[open exported options]] are open (so transient, non persistent) options that will override any configured value (if any) 
                      having the ability to be exported to any java child process (as system property -D...) 

 [[open options]] are transient (non persistent) options that will override any configured value (if any) and will be 
                     in use in the current process (and ignored elsewhere). Such options will be considered in creating worspaces 
                     as well but still they are not persistent.


@@NUTS CREATE EXPORTED OPTIONS:@@
 [[--workspace]] {{\<workspace-location\>}}
 [[-w]] {{\<workspace-location\>}}
      workspace location to open (or create).
      this defaults to default-workspace. Typically this refers to ~/.nuts/default-workspace
      (when [[--system-config-home]] is not specified). workspace location contains both config and component 
      data (from repositories).

 [[--login]]     {{\<login\>}}
 [[-o]]     {{\<login\>}}
      workspace login
      if not specified, all access to ==nuts== will be with anonymous credentials. so to promote user privileges, one may
      specify user credentials (see --password)

 [[--password]]  {{\<password\>}}
 [[-p]]  {{\<password\>}}
      workspace password
      if not specified, all access to ==nuts== will be with anonymous credentials. so to promote user privileges, one may
      specify user credentials (see --login)

 [[-V]] {{\<boot-api-version\>}}
 [[--boot-version]] {{\<boot-api-version\>}}
 [[--boot-api-version]] {{\<boot-api-version\>}}
      run a new instance of ==nuts== with the specified version

 [[--boot-runtime]] {{\<runtime-id-or-version\>}}
      load runtime (nuts-core) version. either version may be expressed or full nuts implementation
      (other than nuts-core) should be defined

 [[--runtime-source-url]] {{\<runtime-source-url\>}}
      url to runtime library(nuts-core). In that case, the runtime library should be self sufficient (no dependencies)

 [[--java]]      {{\<java-command\>}}
 [[--boot-java]] {{\<java-command\>}}
 [[-j]] {{\<java-command\>}}
      java command to run new instance of nuts

 [[--java-home]]      {{\<java-home\>}}
 [[--boot-java-home]] {{\<java-home\>}}
 [[-J]] {{\<java-home\>}}
      java home to run new instance of nuts

 [[--verbose]] , [[--log-finest]]  , [[--log-info]] , [[--log-fine]] ,
 
 [[--java-options]]      {{\<java-options\>}}
 [[--boot-java-options]] {{\<java-options\>}}
 [[-O]] {{\<java-options\>}}
      java options to run new instance of nuts

@@NUTS CREATE OPTIONS:@@

 [[--archetype]] {{\<archetype-name\>}}
 [[-A]] {{\<archetype-name\>}}
      workspace archetype to create (if workspace not found).
      when opening a non existing workspace, ==nuts== will create it
      using the default archetype. Supported archetypes are :
          {{default}} : should handle most cases. Will create 4 repositories
                    nuts local       : containing local ==nuts== (java and non java ==nuts==)
                    maven-local      : containing a reference to ~/.m2/repository local maven repository
                    maven-central    : referencing http://repo.maven.apache.org/maven2/ (with cache support)
                    vpc-public-maven : referencing https://.../vpc-public-maven/master author\'s github maven repo (cached)
                    vpc-public-nuts  : referencing https://.../vpc-public-nuts/master  author\'s github ==nuts==  repo (cached)
          {{minimal}} : will create an almost empty workspace with a single ==nuts== local repository
          {{server}}  : will create an almost empty workspace with a couple of users __guest_ (read support) and __contributor_
                    (write support)

 [[--store-strategy]] {{\<store-strategy\>}}
      Defines store strategy used for persisting config and data of the workspace.
      Valid values of {{\<store-strategy\>}} are {{exploded}}, {{standalone}}.
      {{exploded}}   : use distinct folders for temp, var, lib, config ... folders (this is the default) 
      {{standalone}} : use a self contained folder for all types of data of the workspace. This is interesting for sharing 
                   workspaces across multiple machines.

 [[--standalone-workspace]]
       will boot with standalone strategy so that all file will be stored in the workspace folder
       overriding workspace config. same as  [[--store-strategy]] {{standalone}}
 
 [[--exploded-workspace]]
       will boot with exploded strategy so that all file will be stored distinct folders (cache, and log
       particularly will be stored elsewhere depending on on configuration.
       same as  [[--store-strategy]] {{exploded}}

 [[--repo-store-strategy]] {{\<store-strategy\>}}
      Defines store strategy used for persisting config and data of the repositories.
      Valid values of {{\<store-strategy\>}} are {{exploded}}, {{standalone}}.
      {{exploded}}   : use distinct folders for temp, var, lib, config ... folders (this is the default) 
      {{standalone}} : use a self contained folder for all types of data of the repository (under repository\'s main folder). 
                   This is interesting for sharing 
                   workspaces across multiple machines.

 [[--standalone-repositories]]
       will boot with standalone strategy so that all file will be stored in the repository\'s folder
       overriding workspace config. same as  [[--repo-store-strategy]] {{standalone}}
 
 [[--exploded-repositories]] or [[--exploded-strategy]]
       will boot with exploded strategy so that all file will be stored distinct folders (cache, and log
       particularly will be stored elsewhere depending on on configuration.
       same as  [[--repo-store-strategy]] {{exploded}}

 [[--standalone]]
    Equivalent of [[--standalone-workspace]] and [--standalone-repositories]]

 [[--exploded]]
    Equivalent of [[--exploded-workspace]] and [--exploded-repositories]]

 [[--store-layout]] {{\<store-layout\>}}
      Defines store layout relatively to the running operating system. This resolve root locations of data folders.
      that to say that all 'programs' folders for instance will be located at the location defined by the layout.

      Valid values of {{\<store-layout\>}} are {{system}}, {{windows}} and {{linux}}
      {{system}}     : resolve the running operating system (windows, linux, ...) and select appropriate folder
      {{windows}}    : always use windows layout (even if running on iOS)
      {{linux}}      : always use linux/unix layout (even if running on windows)

      Data folders of nuts are :
        programs : executable binaries folder
        lib      : non executable binaries (libraries) folder
        config   : configuration/settings files folder
        var      : data files folder
        logs     : log/trace files folder
        temp     : temporary files folder
        cache    : cache folder
      
     In the Windows layout, default (home) locations resolve to ($HOME is the user\'s home folder)
        programs : $HOME/AppData/Roaming/nuts
        lib      : $HOME/AppData/Roaming/nuts
        config   : $HOME/AppData/Roaming/nuts
        var      : $HOME/AppData/Roaming/nuts
        logs     : $HOME/AppData/Roaming/nuts
        temp     : $java.io.tmpdir/nuts
        cache    : $HOME/AppData/Local/nuts

     In the Linux layout, default locations resolve to ($HOME is the user\'s home folder)
        programs : $HOME/.nuts
        lib      : $HOME/.nuts
        config   : $HOME/.nuts
        var      : $HOME/.nuts
        logs     : $HOME/.nuts
        temp     : $java.io.tmpdir/$username/nuts
        cache    : $HOME/.cache/nuts
     
    These home locations are tuned individually using the following options
            [[--system-programs-home]] {{\<path\>}}
            [[--system-lib-home]] {{\<path\>}}
            [[--system-config-home]] {{\<path\>}}
            [[--system-var-home]] {{\<path\>}}
            [[--system-logs-home]] {{\<path\>}}
            [[--system-temp-home]] {{\<path\>}}
            [[--system-cache-home]] {{\<path\>}}

            [[--windows-programs-home]] {{\<path\>}}
            [[--windows-lib-home]] {{\<path\>}}
            [[--windows-config-home]] {{\<path\>}}
            [[--windows-var-home]] {{\<path\>}}
            [[--windows-logs-home]] {{\<path\>}}
            [[--windows-temp-home]] {{\<path\>}}
            [[--windows-cache-home]] {{\<path\>}}

            [[--linux-programs-home]] {{\<path\>}}
            [[--linux-lib-home]] {{\<path\>}}
            [[--linux-config-home]] {{\<path\>}}
            [[--linux-var-home]] {{\<path\>}}
            [[--linux-logs-home]] {{\<path\>}}
            [[--linux-temp-home]] {{\<path\>}}
            [[--linux-cache-home]] {{\<path\>}}

 [[--system-layout]] or [[--system]]
       will use current system layout to resolve folder candidates for log,config,programs ...etc.
       same as  [[--store-layout]] {{\<store-layout\>}} {{system}}
 
 [[--windows-layout]]
       will use windows layout to resolve folder candidates for log,config,programs ...etc.
       same as  [[--store-layout]] {{\<store-layout\>}} {{windows}}

 [[--linux-layout]]
       will use linux/unix layout to resolve folder candidates for log,config,programs ...etc.
       same as  [[--store-layout]] {{\<store-layout\>}} {{linux}}

 More tuning of these folders may be done by defining the folders location directly 
 instead of the folder\'s home locations using the following options :
            [[--programs-location]] {{\<path\>}}
            [[--lib-location]] {{\<path\>}}
            [[--config-location]] {{\<path\>}}
            [[--var-location]] {{\<path\>}}
            [[--logs-location]] {{\<path\>}}
            [[--temp-location]] {{\<path\>}}
            [[--cache-location]] {{\<path\>}}

 [[--skip-install-companions]]
       skip installing companion tools.
 
@@NUTS OPEN EXPORTED OPTIONS:@@
 [[--global]]  or [[-g]]
      uses root/system wide workspace instead of user\'s own workspace. 
      requires admin privileges as it uses.
      Use shared workspace is located at :
      Windows    : $ProgramFiles/nuts/system-workspace/repositories/local
      Linux/Unix : /usr/share/nuts/system-workspace/repositories/local
      More generally folder homes are defines as follows :
      Windows Layout   :
        programs : $ProgramFiles/nuts
        lib      : $ProgramFiles/nuts
        config   : $ProgramFiles/nuts
        var      : $ProgramFiles/nuts
        logs     : $ProgramFiles/nuts
        temp     : $TMP/nuts
        cache    : $ProgramFiles/nuts
      Linux Layout    :
        programs : /opt/nuts/programs
        lib      : /opt/nuts/lib
        config   : /etc/opt/nuts
        var      : /var/opt/nuts
        logs     : /var/log/nuts
        temp     : /tmp/nuts/global
        cache    : /var/cache/nuts

 [[--color]] or [[-C]]
      enables formatted (colorful) terminal ({{formatted}} terminal)
    [[--color]]=always|yes|true|y
      equivalent to [[--term-formatted]]
    [[--color]]=never|none|no|false|n
      equivalent to [[--term-filtered]]
    [[--color]]=inherited|system
      equivalent to [[--color]]=none or [[--term-filtered]]

 [[--no-color]]
      disable formatted (colorful) terminal ({{filtered}} terminal).
      equivalent to 

 [[--term-system]] or [[-S]]
      uses default (system\'s) terminal (may be or may be not {{formatted}} terminal)

 [[--term-formatted]] or [[-L]]
      uses formatted (colorful) terminal (as far as it is possible)

 [[--term-filtered]] or [[-L]]
      uses filtered terminal (no colors)

 [[--term-inherited]] or [[-H]]
      uses inherited (from parent workspace process) terminal

 [[--term]] {{\<term-type\>}}
 [[-t]] {{\<term-type\>}}
      uses specified terminal type. terminal type is one of :
      + {{formatted}}
      + {{filtered}}
      + {{inherited}}

 [[--read-only]] or [[-R]] 
      read only mode. All changes to the workspace - if ever - are not persisted.

 [[--verbose]] , [[--log-finest]]  , [[--log-info]] , [[--log-fine]] ,
 [[--log-finer]] , [[--log-severe]] , [[--log-warning]] ,
 [[--log-off]] , [[--log-off]]
      apply trace level

 [[--log-size]]       {{\<size\>}}
      define the maximum number of bytes to write to any one file. size is either expressed in bytes or suffixed with unit.
      supported units are :
        {{k}} or {{kb}} : for kilo-bytes (example 10k)
        {{m}} or {{mb}} : for mega-bytes (example 10m)
        {{g}} or {{gb}} : for giga-bytes (example 10g)

 [[--log-folder]]     {{\<log-folder-path\>}}
      define log file folder path

 [[--log-name]]       {{\<log-file-name-pattern\>}}
      define log file name pattern. this defaults to "nuts-%g.log"

 [[--log-count]]      {{\<number\>}}
      define the number of files to use (in rotating log)

 [[--log-inherited]] 
      calls rootLogger.setUseParentHandlers(true) to inherit log handlers.

 [[--exclude-extension]]     {{\<extension-id-list\>}}
      exclude extensions from being loaded at runtime. list is separated with characters " ,;"

 [[--exclude-repository]]   {{\<repository-list\>}}
      exclude repositories from being loaded at runtime. list is separated with characters " ,;"

 [[--repository]]   {{\<repository-path\>}}
      register a temporary repository at the given path

 [[--yes]]
      disables interactive mode and assumes 'yes' for all questions

 [[--no]]
      disables interactive mode and assumes 'no' for all questions

@@NUTS OPEN OPTIONS:@@

 [[--recover]]  or [[-0]]
      try to recover from invalid workspace by ignoring cache and re-resolving dependencies. User configuration will not be altered.
 [[--reset]] or [[-r]]
       reset (delete) ==nuts== workspace folder
 [[--cleanup]] or [[-c]]
       clean (delete) ==nuts== cache folders

 [[--perf]]
      show startup time in ms

 [[--embedded]]  or [[-b]]
      when invoking a nuts component, it will be executed in the current process (no JVM process wil be spawn)

 [[--external]]  or [[-x]]
      when invoking a nuts component, it will alway be executed in a newly created process (this is the default)

 [[--native]]  or [[-n]]
      the command is considered as a native command (not a nuts) and will be passed to the os as is.

 [[--open-mode]]  {{\<mode\>}}
      defines open mode of the workspace. three values are accepted :
      {{open-or-create}} or {{RW}} or {{ON}} or {{OC}} : this is the default, if 
                    the workspace exists, it will be opened ; if it is not it will
                    be created then opened.
      {{open-existing}}  or {{R}}   or {{O}}  : will open existing workspace of fail
      {{create-new}}   or {{W}} or {{C}} or {{N}} : will create non existing workspace of fail

 [[--open]]
      will open existing workspace of fail

 [[--create]]
      will create non existing workspace of fail

@@NUTS COMMAND:@@

 [[-]] {{\<args\>}}...
   runs a nut\'s shell (nsh) command with the remaining arguments

 [[--version]] or [[-version]] or [[-v]]
      show version

 [[--reset]]
       reset (delete) ==nuts== workspace folder and exit

 [[--help]] or [[-?]] or [[-h]]
      show this help and exit

 [[--license]]
      show license info

 [[--exec]] ...
 [[-e]] \[-options\] \[command\] {{\<arguments\>}}...
      runs command with the given executor options (it will be considered an option if it 
      starts with '-'). This is helpful to issue JVM Options to executor for instance

 [[info]]
      show workspace detailed information (paths and libraries)

 [[install]] {{\<nuts-component\>}}...
      install ==nuts== package {{\<nuts-component\>}}

 [[uninstall]] {{\<nuts-component\>}}...
      uninstall  ==nuts== package {{\<nuts-component\>}}

 [[update]]
       check if a newer version of ==nuts== is available in the current workspace and perform update

 [[check-updates]]
       check if a newer version of ==nuts== is available in the current workspace without performing updates


 [[--!...]] or [[-!...]] 
      option will be discarded (and all of its parameters)


@@EXAMPLES:@@
        ==nuts== [[--help]]
            shows this help and exit
       
        ==nuts== [[--workspace]] /home/me/some-folder [[--archetype]] minimal
            A minimal ('minimal' archetype) workspace will be created 
            and saved if no workspace was resolved. The workspace handles local 
            packages only (because of 'minimal' archetype)
       
        ==nuts== [[--workspace]] /home/me/some-folder  [[update]]
            updates ==nuts== to the very latest version using workspace location
            /home/me/some-folder.

        ==nuts== [[--workspace]] /home/me/some-folder  [[--yes]] [[-e]] -Xmx1G netbeans-launcher
            runs netbeans-launcher with JVM option  -Xmx1G. If the component is not installed
            it will be automatically installed ( [[--yes]] modifier helps bypassing interactive mode)
