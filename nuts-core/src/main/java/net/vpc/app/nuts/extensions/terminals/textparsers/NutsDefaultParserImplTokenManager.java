/* NutsDefaultParserImplTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. NutsDefaultParserImplTokenManager.java */
package net.vpc.app.nuts.extensions.terminals.textparsers;
import java.util.*;

/** Token Manager. */
@SuppressWarnings("unused")public class NutsDefaultParserImplTokenManager implements NutsDefaultParserImplConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x380000000L) != 0L)
            return 35;
         if ((active0 & 0xe000L) != 0L)
            return 19;
         if ((active0 & 0x70000L) != 0L)
            return 21;
         if ((active0 & 0x70000000000L) != 0L)
            return 33;
         if ((active0 & 0x70000000000000L) != 0L)
            return 17;
         if ((active0 & 0x1c00000000000L) != 0L)
            return 31;
         if ((active0 & 0x1c00000L) != 0L)
            return 29;
         if ((active0 & 0xe000000000000L) != 0L)
            return 15;
         if ((active0 & 0x150L) != 0L)
            return 9;
         if ((active0 & 0x380000L) != 0L)
            return 27;
         if ((active0 & 0x70000000L) != 0L)
            return 13;
         if ((active0 & 0x1c00000000L) != 0L)
            return 39;
         if ((active0 & 0xa8L) != 0L)
            return 7;
         if ((active0 & 0xe000000000L) != 0L)
            return 25;
         if ((active0 & 0xe000000L) != 0L)
            return 11;
         if ((active0 & 0x380000000000L) != 0L)
            return 23;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 34:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x180000000000000L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x380000000000L);
      case 36:
         return jjMoveStringLiteralDfa1_0(0xe000000L);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x70000000000L);
      case 39:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0xc00000000000000L);
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 42:
         return jjMoveStringLiteralDfa1_0(0x70000L);
      case 43:
         return jjMoveStringLiteralDfa1_0(0xe000000000L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x1c00000000L);
      case 60:
         return jjMoveStringLiteralDfa1_0(0xa8L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0xe000L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x150L);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x1c00000L);
      case 91:
         return jjStopAtPos(0, 1);
      case 93:
         return jjStopAtPos(0, 2);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x380000L);
      case 123:
         return jjStopAtPos(0, 11);
      case 125:
         return jjStopAtPos(0, 12);
      case 126:
         return jjMoveStringLiteralDfa1_0(0x380000000L);
      case 163:
         return jjMoveStringLiteralDfa1_0(0x70000000L);
      case 164:
         return jjMoveStringLiteralDfa1_0(0x1c00000000000L);
      case 167:
         return jjMoveStringLiteralDfa1_0(0xe000000000000L);
      case 168:
         return jjMoveStringLiteralDfa1_0(0x70000000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L);
      case 35:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L);
      case 36:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000L);
      case 37:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000L);
      case 39:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L);
      case 42:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x30000L);
      case 43:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000L);
      case 47:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000L);
      case 60:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x28L);
      case 61:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6000L);
      case 62:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x50L);
      case 64:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000L);
      case 94:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x180000L);
      case 126:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000L);
      case 163:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000L);
      case 164:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L);
      case 167:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000L);
      case 168:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(2, 55);
         break;
      case 35:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 36:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 37:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 39:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         break;
      case 42:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 43:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 47:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 60:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8L);
      case 61:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 62:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      case 64:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 94:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 126:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 163:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 164:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 167:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L);
      case 168:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(3, 43);
         break;
      case 36:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(3, 25);
         break;
      case 37:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(3, 40);
         break;
      case 42:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(3, 16);
         break;
      case 43:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 37);
         break;
      case 47:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(3, 34);
         break;
      case 60:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(3, 3);
         break;
      case 61:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(3, 13);
         break;
      case 62:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(3, 4);
         break;
      case 64:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(3, 22);
         break;
      case 94:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(3, 19);
         break;
      case 126:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 31);
         break;
      case 163:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         break;
      case 164:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(3, 46);
         break;
      case 167:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(3, 49);
         break;
      case 168:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(3, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x19800000000L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xfffffe67ffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x800000000L, 0x0L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0xfffffff7ffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x8000000000L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0xffffff7fffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0x10000000000L, 0x0L
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0xfffffeffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec9 = {
   0x0L, 0x0L, 0x1000000000L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0xffffffefffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 77;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x8fff7043ffffffffL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     { jjCheckNAddStates(0, 18); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 1:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 3:
                  if ((0x70008fbc00000000L & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 5:
                  if ((0x8fff7043ffffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 6:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0xefffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 8:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 10:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0xffffffefffffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 13:
               case 15:
               case 17:
               case 27:
               case 29:
               case 31:
               case 35:
               case 37:
               case 41:
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 18:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0xdfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 20:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0xfffffbffffffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 22:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xfffffff7ffffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 24:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xfffff7ffffffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 32:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0xffffffdfffffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 38:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0xffff7fffffffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 44:
               case 47:
                  { jjCheckNAddStates(22, 25); }
                  break;
               case 59:
               case 62:
                  { jjCheckNAddStates(26, 29); }
                  break;
               case 70:
               case 72:
                  { jjCheckNAddStates(30, 33); }
                  break;
               case 74:
                  if ((0x70008fbc00000000L & l) != 0L)
                     { jjCheckNAddStates(30, 33); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x97fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     { jjCheckNAddStates(0, 18); }
                  }
                  else if (curChar == 96)
                     { jjAddStates(34, 36); }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 126)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 27;
                  if (curChar == 96)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 2:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x68000001f8000001L & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 4:
                  if (curChar == 96 && kind > 64)
                     kind = 64;
                  break;
               case 5:
                  if ((0x97fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 7:
               case 9:
               case 11:
               case 13:
               case 15:
               case 17:
               case 19:
               case 21:
               case 23:
               case 25:
               case 31:
               case 33:
               case 39:
               case 41:
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 26:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xffffffffbfffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 28:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xfffffffffffffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 34:
                  if (curChar == 126)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 36:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0xffffffff7fffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 40:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 42:
                  if (curChar == 96)
                     { jjAddStates(34, 36); }
                  break;
               case 43:
                  if (curChar == 96)
                     { jjCheckNAddStates(37, 40); }
                  break;
               case 44:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     { jjCheckNAddStates(22, 25); }
                  break;
               case 45:
               case 49:
               case 50:
                  if (curChar == 96)
                     { jjCheckNAdd(44); }
                  break;
               case 46:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  { jjCheckNAddStates(22, 25); }
                  break;
               case 48:
                  if (curChar == 96)
                     { jjCheckNAddStates(41, 43); }
                  break;
               case 51:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 96 && kind > 61)
                     kind = 61;
                  break;
               case 53:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 96)
                     { jjCheckNAddTwoStates(49, 51); }
                  break;
               case 56:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 57:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 96)
                     { jjCheckNAddStates(44, 47); }
                  break;
               case 59:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     { jjCheckNAddStates(26, 29); }
                  break;
               case 60:
               case 64:
                  if (curChar == 96)
                     { jjCheckNAdd(59); }
                  break;
               case 61:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  { jjCheckNAddStates(26, 29); }
                  break;
               case 63:
                  if (curChar == 96)
                     { jjCheckNAddTwoStates(64, 66); }
                  break;
               case 65:
                  if (curChar == 96 && kind > 62)
                     kind = 62;
                  break;
               case 66:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 96)
                     { jjCheckNAdd(64); }
                  break;
               case 68:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 69:
                  if (curChar == 96)
                     { jjCheckNAddStates(48, 50); }
                  break;
               case 70:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     { jjCheckNAddStates(30, 33); }
                  break;
               case 71:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddStates(30, 33); }
                  break;
               case 73:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x68000001f8000001L & l) != 0L)
                     { jjCheckNAddStates(30, 33); }
                  break;
               case 75:
                  if (curChar == 96 && kind > 63)
                     kind = 63;
                  break;
               case 76:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec2[i2] & l2) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     { jjCheckNAddStates(0, 18); }
                  }
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  if ((jjbitVec5[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if ((jjbitVec7[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if ((jjbitVec9[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 3:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 5:
                  if ((jjbitVec2[i2] & l2) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 7:
               case 9:
               case 11:
               case 19:
               case 21:
               case 23:
               case 25:
               case 27:
               case 29:
               case 33:
               case 35:
               case 37:
               case 39:
               case 41:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 12:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((jjbitVec4[i2] & l2) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 14:
                  if ((jjbitVec5[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((jjbitVec6[i2] & l2) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 16:
                  if ((jjbitVec7[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((jjbitVec8[i2] & l2) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 30:
                  if ((jjbitVec9[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  { jjCheckNAddStates(0, 18); }
                  break;
               case 44:
               case 47:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(22, 25); }
                  break;
               case 59:
               case 62:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(26, 29); }
                  break;
               case 70:
               case 72:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(30, 33); }
                  break;
               case 74:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     { jjCheckNAddStates(30, 33); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 77 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 
   36, 38, 40, 1, 2, 4, 44, 45, 46, 48, 59, 60, 61, 63, 70, 71, 
   73, 76, 57, 68, 69, 44, 45, 46, 55, 49, 51, 54, 59, 60, 67, 61, 
   70, 71, 73, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\133", "\135", "\74\74\74\74", "\76\76\76\76", "\74\74\74", "\76\76\76", 
"\74\74", "\76\76", "\50", "\51", "\173", "\175", "\75\75\75\75", "\75\75\75", "\75\75", 
"\52\52\52\52", "\52\52\52", "\52\52", "\136\136\136\136", "\136\136\136", "\136\136", 
"\100\100\100\100", "\100\100\100", "\100\100", "\44\44\44\44", "\44\44\44", "\44\44", 
"\243\243\243\243", "\243\243\243", "\243\243", "\176\176\176\176", "\176\176\176", "\176\176", 
"\57\57\57\57", "\57\57\57", "\57\57", "\53\53\53\53", "\53\53\53", "\53\53", "\45\45\45\45", 
"\45\45\45", "\45\45", "\43\43\43\43", "\43\43\43", "\43\43", "\244\244\244\244", 
"\244\244\244", "\244\244", "\247\247\247\247", "\247\247\247", "\247\247", 
"\250\250\250\250", "\250\250\250", "\250\250", "\42\42\42", "\42\42", "\42", "\47\47\47", 
"\47\47", "\47", null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public NutsDefaultParserImplTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public NutsDefaultParserImplTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 77; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[77];
    private final int[] jjstateSet = new int[2 * 77];

    
    protected char curChar;
}
