/* NutsDefaultParserImpl.java */
/* Generated By:JavaCC: Do not edit this line. NutsDefaultParserImpl.java */
package net.vpc.app.nuts.extensions.textparsers.defaultparser;
import java.util.*;

class NutsDefaultParserImpl implements NutsDefaultParserImplConstants {

  final public TextNode parseList() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_1:
    while (true) {
      n = parse();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_DQUOTE1() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_2:
    while (true) {
      n = parse_NO_DQUOTE1();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_DQUOTE2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_3:
    while (true) {
      n = parse_NO_DQUOTE2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_DQUOTE3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_4:
    while (true) {
      n = parse_NO_DQUOTE3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_SQUOTE1() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_5:
    while (true) {
      n = parse_NO_SQUOTE1();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_SQUOTE2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_6:
    while (true) {
      n = parse_NO_SQUOTE2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_SQUOTE3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_7:
    while (true) {
      n = parse_NO_SQUOTE3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_7;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_EQ2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_8:
    while (true) {
      n = parse_NO_EQ2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_8;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_EQ3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_9:
    while (true) {
      n = parse_NO_EQ3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_9;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_EQ4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_10:
    while (true) {
      n = parse_NO_EQ4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_10;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_STAR2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_11:
    while (true) {
      n = parse_NO_STAR2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_11;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_STAR3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_12:
    while (true) {
      n = parse_NO_STAR3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_12;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_STAR4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_13:
    while (true) {
      n = parse_NO_STAR4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_13;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_PLUS2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_14:
    while (true) {
      n = parse_NO_PLUS2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_14;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_PLUS3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_15:
    while (true) {
      n = parse_NO_PLUS3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_15;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_PLUS4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_16:
    while (true) {
      n = parse_NO_PLUS4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_16;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_DIV2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_17:
    while (true) {
      n = parse_NO_DIV2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_17;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_DIV3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_18:
    while (true) {
      n = parse_NO_DIV3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_18;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_DIV4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_19:
    while (true) {
      n = parse_NO_DIV4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_19;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_HAT2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_20:
    while (true) {
      n = parse_NO_HAT2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_20;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_HAT3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_21:
    while (true) {
      n = parse_NO_HAT3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_21;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_HAT4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_22:
    while (true) {
      n = parse_NO_HAT4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_22;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_AT2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_23:
    while (true) {
      n = parse_NO_AT2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_23;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_AT3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_24:
    while (true) {
      n = parse_NO_AT3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_24;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_AT4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_25:
    while (true) {
      n = parse_NO_AT4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_25;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_SHARP2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_26:
    while (true) {
      n = parse_NO_SHARP2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_26;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_SHARP3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_27:
    while (true) {
      n = parse_NO_SHARP3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_27;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_SHARP4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_28:
    while (true) {
      n = parse_NO_SHARP4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_28;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_TILDE2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_29:
    while (true) {
      n = parse_NO_TILDE2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_29;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_TILDE3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_30:
    while (true) {
      n = parse_NO_TILDE3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_30;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_TILDE4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_31:
    while (true) {
      n = parse_NO_TILDE4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_31;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_PERCENT2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_32:
    while (true) {
      n = parse_NO_PERCENT2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_32;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_PERCENT3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_33:
    while (true) {
      n = parse_NO_PERCENT3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_33;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_PERCENT4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_34:
    while (true) {
      n = parse_NO_PERCENT4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_34;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_DOLLAR2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_35:
    while (true) {
      n = parse_NO_DOLLAR2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        break label_35;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_DOLLAR3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_36:
    while (true) {
      n = parse_NO_DOLLAR3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_36;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_DOLLAR4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_37:
    while (true) {
      n = parse_NO_DOLLAR4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        break label_37;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_POUND2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_38:
    while (true) {
      n = parse_NO_POUND2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_38;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_POUND3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_39:
    while (true) {
      n = parse_NO_POUND3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_39;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_POUND4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_40:
    while (true) {
      n = parse_NO_POUND4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_40;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_TREMA2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_41:
    while (true) {
      n = parse_NO_TREMA2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        break label_41;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_TREMA3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_42:
    while (true) {
      n = parse_NO_TREMA3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_42;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_TREMA4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_43:
    while (true) {
      n = parse_NO_TREMA4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        break label_43;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_PLANET2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_44:
    while (true) {
      n = parse_NO_PLANET2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_44;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_PLANET3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_45:
    while (true) {
      n = parse_NO_PLANET3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        break label_45;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_PLANET4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_46:
    while (true) {
      n = parse_NO_PLANET4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        break label_46;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_PGH2() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_47:
    while (true) {
      n = parse_NO_PGH2();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH3:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        break label_47;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_PGH3() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_48:
    while (true) {
      n = parse_NO_PGH3();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH4:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        break label_48;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parseList_NO_PGH4() throws ParseException {List<TextNode> list=new ArrayList(); TextNode n;
    label_49:
    while (true) {
      n = parse_NO_PGH4();
list.add(n);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKS_S:
      case SP4_S:
      case SP3_S:
      case SP2_S:
      case PAR_S:
      case ACC_S:
      case EQ4:
      case EQ3:
      case EQ2:
      case STAR4:
      case STAR3:
      case STAR2:
      case HAT4:
      case HAT3:
      case HAT2:
      case AT4:
      case AT3:
      case AT2:
      case DOLLAR4:
      case DOLLAR3:
      case DOLLAR2:
      case POUND4:
      case POUND3:
      case POUND2:
      case TILDE4:
      case TILDE3:
      case TILDE2:
      case DIV4:
      case DIV3:
      case DIV2:
      case PLUS4:
      case PLUS3:
      case PLUS2:
      case PERCENT4:
      case PERCENT3:
      case PERCENT2:
      case SHARP4:
      case SHARP3:
      case SHARP2:
      case PLANET4:
      case PLANET3:
      case PLANET2:
      case PGH3:
      case PGH2:
      case TREMA4:
      case TREMA3:
      case TREMA2:
      case DQUOTE3:
      case DQUOTE2:
      case DQUOTE1:
      case SQUOTE3:
      case SQUOTE2:
      case SQUOTE1:
      case ANTI_CHAR4:
      case ANTI_CHAR3:
      case ANTI_CHAR2:
      case ANTI_CHAR:
      case PHRASE:{
        ;
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        break label_49;
      }
    }
{if ("" != null) return TextNode.LIST(list);}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

// ---------------------------------------------------------------------------------------------------
  final public 

TextNode parse_NO_DQUOTE1() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_DQUOTE2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_DQUOTE3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_SQUOTE1() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_SQUOTE2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_SQUOTE3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_EQ2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_EQ3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_EQ4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_STAR2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_STAR3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_STAR4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_PLUS2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_PLUS3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_PLUS4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_DIV2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_DIV3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_DIV4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_HAT2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_HAT3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_HAT4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_AT2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_AT3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_AT4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_SHARP2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_SHARP3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_SHARP4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_TILDE2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_TILDE3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_TILDE4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_PERCENT2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_PERCENT3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_PERCENT4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_DOLLAR2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_DOLLAR3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_DOLLAR4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_POUND2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_POUND3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_POUND4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_TREMA2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_TREMA3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_TREMA4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[91] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_PLANET2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_PLANET3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_PLANET4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_PGH2() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_PGH3() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH4:{
      jj_consume_token(PGH4);
t=token.image;
      n = parseList_NO_PGH4();
      jj_consume_token(PGH4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_NO_PGH4() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DQUOTE3:{
      jj_consume_token(DQUOTE3);
t=token.image;
      n = parseList_NO_DQUOTE3();
      jj_consume_token(DQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE2:{
      jj_consume_token(DQUOTE2);
t=token.image;
      n = parseList_NO_DQUOTE2();
      jj_consume_token(DQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DQUOTE1:{
      jj_consume_token(DQUOTE1);
t=token.image;
      n = parseList_NO_DQUOTE1();
      jj_consume_token(DQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE3:{
      jj_consume_token(SQUOTE3);
t=token.image;
      n = parseList_NO_SQUOTE3();
      jj_consume_token(SQUOTE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE2:{
      jj_consume_token(SQUOTE2);
t=token.image;
      n = parseList_NO_SQUOTE2();
      jj_consume_token(SQUOTE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SQUOTE1:{
      jj_consume_token(SQUOTE1);
t=token.image;
      n = parseList_NO_SQUOTE1();
      jj_consume_token(SQUOTE1);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ4:{
      jj_consume_token(EQ4);
t=token.image;
      n = parseList_NO_EQ4();
      jj_consume_token(EQ4);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ3:{
      jj_consume_token(EQ3);
t=token.image;
      n = parseList_NO_EQ3();
      jj_consume_token(EQ3);
n = TextNode.TYPED(t,n);
      break;
      }
    case EQ2:{
      jj_consume_token(EQ2);
t=token.image;
      n = parseList_NO_EQ2();
      jj_consume_token(EQ2);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR4:{
      jj_consume_token(STAR4);
t=token.image;
      n = parseList_NO_STAR4();
      jj_consume_token(STAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR3:{
      jj_consume_token(STAR3);
t=token.image;
      n = parseList_NO_STAR3();
      jj_consume_token(STAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case STAR2:{
      jj_consume_token(STAR2);
t=token.image;
      n = parseList_NO_STAR2();
      jj_consume_token(STAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS4:{
      jj_consume_token(PLUS4);
t=token.image;
      n = parseList_NO_PLUS4();
      jj_consume_token(PLUS4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS3:{
      jj_consume_token(PLUS3);
t=token.image;
      n = parseList_NO_PLUS3();
      jj_consume_token(PLUS3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLUS2:{
      jj_consume_token(PLUS2);
t=token.image;
      n = parseList_NO_PLUS2();
      jj_consume_token(PLUS2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV4:{
      jj_consume_token(DIV4);
t=token.image;
      n = parseList_NO_DIV4();
      jj_consume_token(DIV4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV3:{
      jj_consume_token(DIV3);
t=token.image;
      n = parseList_NO_DIV3();
      jj_consume_token(DIV3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DIV2:{
      jj_consume_token(DIV2);
t=token.image;
      n = parseList_NO_DIV2();
      jj_consume_token(DIV2);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT4:{
      jj_consume_token(HAT4);
t=token.image;
      n = parseList_NO_HAT4();
      jj_consume_token(HAT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT3:{
      jj_consume_token(HAT3);
t=token.image;
      n = parseList_NO_HAT3();
      jj_consume_token(HAT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case HAT2:{
      jj_consume_token(HAT2);
t=token.image;
      n = parseList_NO_HAT2();
      jj_consume_token(HAT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT4:{
      jj_consume_token(AT4);
t=token.image;
      n = parseList_NO_AT4();
      jj_consume_token(AT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT3:{
      jj_consume_token(AT3);
t=token.image;
      n = parseList_NO_AT3();
      jj_consume_token(AT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case AT2:{
      jj_consume_token(AT2);
t=token.image;
      n = parseList_NO_AT2();
      jj_consume_token(AT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP4:{
      jj_consume_token(SHARP4);
t=token.image;
      n = parseList_NO_SHARP4();
      jj_consume_token(SHARP4);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP3:{
      jj_consume_token(SHARP3);
t=token.image;
      n = parseList_NO_SHARP3();
      jj_consume_token(SHARP3);
n = TextNode.TYPED(t,n);
      break;
      }
    case SHARP2:{
      jj_consume_token(SHARP2);
t=token.image;
      n = parseList_NO_SHARP2();
      jj_consume_token(SHARP2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE4:{
      jj_consume_token(TILDE4);
t=token.image;
      n = parseList_NO_TILDE4();
      jj_consume_token(TILDE4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE3:{
      jj_consume_token(TILDE3);
t=token.image;
      n = parseList_NO_TILDE3();
      jj_consume_token(TILDE3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TILDE2:{
      jj_consume_token(TILDE2);
t=token.image;
      n = parseList_NO_TILDE2();
      jj_consume_token(TILDE2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT4:{
      jj_consume_token(PERCENT4);
t=token.image;
      n = parseList_NO_PERCENT4();
      jj_consume_token(PERCENT4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT3:{
      jj_consume_token(PERCENT3);
t=token.image;
      n = parseList_NO_PERCENT3();
      jj_consume_token(PERCENT3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PERCENT2:{
      jj_consume_token(PERCENT2);
t=token.image;
      n = parseList_NO_PERCENT2();
      jj_consume_token(PERCENT2);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR4:{
      jj_consume_token(DOLLAR4);
t=token.image;
      n = parseList_NO_DOLLAR4();
      jj_consume_token(DOLLAR4);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR3:{
      jj_consume_token(DOLLAR3);
t=token.image;
      n = parseList_NO_DOLLAR3();
      jj_consume_token(DOLLAR3);
n = TextNode.TYPED(t,n);
      break;
      }
    case DOLLAR2:{
      jj_consume_token(DOLLAR2);
t=token.image;
      n = parseList_NO_DOLLAR2();
      jj_consume_token(DOLLAR2);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND4:{
      jj_consume_token(POUND4);
t=token.image;
      n = parseList_NO_POUND4();
      jj_consume_token(POUND4);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND3:{
      jj_consume_token(POUND3);
t=token.image;
      n = parseList_NO_POUND3();
      jj_consume_token(POUND3);
n = TextNode.TYPED(t,n);
      break;
      }
    case POUND2:{
      jj_consume_token(POUND2);
t=token.image;
      n = parseList_NO_POUND2();
      jj_consume_token(POUND2);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA4:{
      jj_consume_token(TREMA4);
t=token.image;
      n = parseList_NO_TREMA4();
      jj_consume_token(TREMA4);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA3:{
      jj_consume_token(TREMA3);
t=token.image;
      n = parseList_NO_TREMA3();
      jj_consume_token(TREMA3);
n = TextNode.TYPED(t,n);
      break;
      }
    case TREMA2:{
      jj_consume_token(TREMA2);
t=token.image;
      n = parseList_NO_TREMA2();
      jj_consume_token(TREMA2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET4:{
      jj_consume_token(PLANET4);
t=token.image;
      n = parseList_NO_PLANET4();
      jj_consume_token(PLANET4);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET3:{
      jj_consume_token(PLANET3);
t=token.image;
      n = parseList_NO_PLANET3();
      jj_consume_token(PLANET3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PLANET2:{
      jj_consume_token(PLANET2);
t=token.image;
      n = parseList_NO_PLANET2();
      jj_consume_token(PLANET2);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH3:{
      jj_consume_token(PGH3);
t=token.image;
      n = parseList_NO_PGH3();
      jj_consume_token(PGH3);
n = TextNode.TYPED(t,n);
      break;
      }
    case PGH2:{
      jj_consume_token(PGH2);
t=token.image;
      n = parseList_NO_PGH2();
      jj_consume_token(PGH2);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:
    case SP4_S:
    case SP3_S:
    case SP2_S:
    case PAR_S:
    case ACC_S:
    case ANTI_CHAR4:
    case ANTI_CHAR3:
    case ANTI_CHAR2:
    case ANTI_CHAR:
    case PHRASE:{
      n = parse_Simple();
      break;
      }
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TextNode parse_Simple() throws ParseException {TextNode n;
    String t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SP4_S:{
      jj_consume_token(SP4_S);
t=token.image;
      n = parseList();
      jj_consume_token(SP4_E);
n = TextNode.TYPED(t,n);
      break;
      }
    case SP3_S:{
      jj_consume_token(SP3_S);
t=token.image;
      n = parseList();
      jj_consume_token(SP3_E);
n = TextNode.TYPED(t,n);
      break;
      }
    case SP2_S:{
      jj_consume_token(SP2_S);
t=token.image;
      n = parseList();
      jj_consume_token(SP2_E);
n = TextNode.TYPED(t,n);
      break;
      }
    case BRAKS_S:{
      jj_consume_token(BRAKS_S);
t=token.image;
      n = parseList();
      jj_consume_token(BRAKS_E);
n = TextNode.BRAKETS(n);
      break;
      }
    case PAR_S:{
      jj_consume_token(PAR_S);
t=token.image;
      n = parseList();
      jj_consume_token(PAR_E);
n = TextNode.PAR(n);
      break;
      }
    case ACC_S:{
      jj_consume_token(ACC_S);
t=token.image;
      n = parseList();
      jj_consume_token(ACC_E);
n = TextNode.ACC(n);
      break;
      }
    case PHRASE:{
      jj_consume_token(PHRASE);
n = TextNode.PHRASE(token.image);
      break;
      }
    case ANTI_CHAR4:{
      jj_consume_token(ANTI_CHAR4);
n = TextNode.ANTI_CHAR4(token.image);
      break;
      }
    case ANTI_CHAR3:{
      jj_consume_token(ANTI_CHAR3);
n = TextNode.ANTI_CHAR3(token.image);
      break;
      }
    case ANTI_CHAR2:{
      jj_consume_token(ANTI_CHAR2);
n = TextNode.ANTI_CHAR2(token.image);
      break;
      }
    case ANTI_CHAR:{
      jj_consume_token(ANTI_CHAR);
n = TextNode.ANTI_CHAR(token.image);
      break;
      }
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public NutsDefaultParserImplTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[99];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffff6aaa,0xffffaaaa,0xffffcaaa,0xfffbeaaa,0xfffdeaaa,0xfffeeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffdfeaaa,0xffefeaaa,0xfff7eaaa,0xfeffeaaa,0xff7feaaa,0xffbfeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0x7fffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xf7ffeaaa,0xfbffeaaa,0xfdffeaaa,0xbfffeaaa,0xdfffeaaa,0xefffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffff6aaa,0xffffaaaa,0xffffcaaa,0xfffbeaaa,0xfffdeaaa,0xfffeeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffdfeaaa,0xffefeaaa,0xfff7eaaa,0xfeffeaaa,0xff7feaaa,0xffbfeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0x7fffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xf7ffeaaa,0xfbffeaaa,0xfdffeaaa,0xbfffeaaa,0xdfffeaaa,0xefffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xffffeaaa,0xaaa,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xffffffff,0xfdffffff,0xfeffffff,0xff7fffff,0xefffffff,0xf7ffffff,0xfbffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffff7f,0xffffffbf,0xffffffdf,0xffffffef,0xfffffff7,0xfffffffb,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffdfff,0xffffefff,0xfffff7ff,0xfffffffd,0xfffffffe,0xffffffff,0xfffffbff,0xfffffdff,0xfffffeff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffbfffff,0xffdfffff,0xffefffff,0xfffeffff,0xffff7fff,0xffffbfff,0xfff7ffff,0xfffbffff,0xfffdffff,0xffffffff,0xfdffffff,0xfeffffff,0xff7fffff,0xefffffff,0xf7ffffff,0xfbffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffff7f,0xffffffbf,0xffffffdf,0xffffffef,0xfffffff7,0xfffffffb,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffdfff,0xffffefff,0xfffff7ff,0xfffffffd,0xfffffffe,0xffffffff,0xfffffbff,0xfffffdff,0xfffffeff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffbfffff,0xffdfffff,0xffefffff,0xfffeffff,0xffff7fff,0xffffbfff,0xfff7ffff,0xfffbffff,0xfffdffff,0xe0000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,};
   }

  /** Constructor with InputStream. */
  public NutsDefaultParserImpl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NutsDefaultParserImpl(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NutsDefaultParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 99; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 99; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public NutsDefaultParserImpl(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NutsDefaultParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 99; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 99; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public NutsDefaultParserImpl(NutsDefaultParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 99; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(NutsDefaultParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 99; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[66];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 99; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 66; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
