##) settings:
manage nuts workspace

###) SYNOPSIS:
```sh
nuts settings <command> ...
 ```
manage nuts workspace

###) ALIAS COMMANDS:
```sh
nuts settings list aliases ...
```
        : list all command aliases
          If some arguments are passed to the command, it will be processed
          as name filter.
          Example :
          ```sh
            nuts settings list aliases nb*
          ```
               will search for all aliases that start with *

```sh
nuts settings add alias <name>=<value> ...
nuts settings add alias <name> <value> ...
```
        : add one or multiple new command aliases

```sh
nuts settings remove alias <name> ...
```
        : remove one or multiple command aliases or aliases

##) IMPORT COMMANDS:
```sh
nuts settings import <group> ...
```
        add one or multiple groups to imported groups

```sh
nuts settings unimport <group> ...
```
        remove one or multiple groups from imported groups
        remove one or multiple groups from imported groups

```sh
nuts settings list imports
```
        list imported groups

```sh
nuts settings clear imports
```
        remove all imported groups


##) REPOSITORY COMMANDS:

```sh
nuts settings list archetypes
```
        list all available archetypes

```sh
nuts settings add repo <repos-name> ...
```
        add repository

```sh
nuts settings remove repo <repos-name> ...
```
        remove repository

```sh
nuts settings list repos
```
        list repositories

```sh
nuts settings edit repo <repoId> ...
```
        edit repository

```sh
nuts settings update stats <repo-folder-path> ...
```
        update local repo statistics

###) SECURITY COMMANDS:
```sh
nuts settings list users
```
        list available users

```sh
nuts settings add user [<-options>] <username> <password>
```
        add new user to the workspace

```sh
nuts settings add user [--repo | -r <repo-name>] <username> <password> [<remote-identity> <remote-password>]
```
        add new user to the repository

```sh
nuts settings edit user
```
        edit user

```sh
nuts settings passwd
```
        change password

```sh
nuts settings secure
```
        switch to secure mode

```sh
nuts settings unsecure
```
        switch to un-secure mode

###) DESKTOP INTEGRATION COMMANDS:

desktop integration is a portable desktop integration sub command that helps creation of scripts and shortcut on
the host operating system to facilitate usage of nuts command line tool.

###) SYNOPSIS
```sh
nuts settings add launcher <-options> <command> ...
```
    add launchers/shortcuts for the given command so that it can be called directly by it's name

```sh
nuts settings remove launcher <-options> <command> ...
```
    remove launchers/shortcuts for the given

```sh
nuts settings switch <-options> ...
```
    switch default nuts workspace and/or version.
    on linux platforms, for example, ```sh nuts settings``` will update ~/.bashrc to point to the given workspace and/or version.
    a workspace can support multiple nuts-api versions and hence, ```sh nuts settings switch``` can switch between those versions.

```sh
nuts settings add link <-options> ...
```
    create a new launcher to link to an existing nuts workspace and/or version.
    the link created will run 'nuts' against the selected workspace and/or version.

####) OPTIONS:
```sh
nuts settings add launcher <-options> <command> ...
```
    install launchers/shortcuts for the given command so that it can be called directly by it's name
``` sh  --embedded | -b ```
    enable embedded mode
``` sh  --external | --spawn | -x ```
    enable spawn process mode
``` sh  --user-cmd ```
    enable user external command mode
``` sh  --root-cmd ```
    enable root external command mode
``` sh  --exec-options | -X <option> ```
    exec options
``` sh  --name=<name> | -n=<name> ```
    launcher name pattern
      the default pattern is '%n-%v' for 'nuts' and '%' for other ids.
      '%g' is replaced by the artifactId
      '%n' is replaced by the groupId
      '%v' is replaced by the version

``` sh  --workspace=<location> | -w=<location> ```
    target workspace

```sh
nuts settings remove launcher <-options> <command> ...
```
    uninstall launchers/shortcuts for the given
```sh --embedded | -b ```
    enable embedded mode
```sh --external | --spawn | -x ```
    enable spawn process mode
```sh --user-cmd ```
    enable user external command mode
```sh --root-cmd ```
    enable root external command mode
```sh --exec-options | -X <option> ```
    exec options

```sh
nuts settings switch <-options> [<workspace>] [<api>]
```
    switch default nuts workspace and/or version.
    on linux platforms, for example, ```sh nuts settings``` will update ~/.bashrc to point to the given workspace and/or version.
    a workspace can support multiple nuts-api versions and hence, ```sh nuts settings switch``` can switch between those versions.
```sh --workspace | -w ```
    target workspace location
```sh --api | -a ```
    nuts api version

###) EXAMPLES:
```sh nuts settings add launcher nuts ```
    creates a nuts shortcut (named nuts) for nuts

```sh nuts settings add launcher nuts#current ```
    creates a nuts shortcut named  nuts#0.8.1 (assuming the current version is 0.8.1

###) GENERAL COMMANDS:
```sh
nuts settings list extension points|lxp
```
        list currently loaded extension points

```sh
nuts settings delete apps|config|var|log|temp|cache|lib|run ... [--force|-f]
```
        delete store folders

```sh
nuts settings set loglevel verbose|fine|finer|finest|error|severe|config|all|none
```

```sh
nuts settings connect <username@server:port> [--password <password>]
```
        connect to remote nuts server . default port is 8898
